WEBVTT

00:00:03.360 --> 00:00:09.030
Hey, what's up guys, it's Pedro here from 
New cutter calm. And in this tutorial,  

00:00:09.030 --> 00:00:15.540
we're gonna learn how to install Node j s, as well 
as learn how to actually run code using node j s.  

00:00:15.540 --> 00:00:21.690
So to get started, we're going to actually have 
to download node j s. So if you go to Google and  

00:00:21.690 --> 00:00:29.010
type node j s download, you should get a web page 
similar to this. And I will be leaving a link in  

00:00:29.010 --> 00:00:36.870
the description in case you can't find it. So go 
ahead and download eight, point three lt s. Now  

00:00:36.870 --> 00:00:43.560
once you download that, run it, install it enjoy 
all that good stuff. And within these tutorials,  

00:00:43.560 --> 00:00:49.350
I'm going to be using Visual Studio code. And 
if you don't know what Visual Studio code is,  

00:00:49.350 --> 00:00:55.950
it's an editor. Now, you can use whatever editor 
you want. But the reason I'm using Visual Studio  

00:00:55.950 --> 00:01:02.310
code is because it has an integrated command 
prompt. So once you download these two things,  

00:01:02.310 --> 00:01:09.600
I'm just going to head over to my desktop. 
And let's create a new folder. And I'm just  

00:01:09.600 --> 00:01:17.310
going to say no JS tutorial. And now I'm just 
going to head over to Visual Studio code. And  

00:01:17.310 --> 00:01:26.250
you should have a welcome screen like this, go to 
File, Open Folder. And we are going to open the  

00:01:26.250 --> 00:01:32.550
folder that we just created. So I'm just going 
to select this. And now I'm just going to hit  

00:01:33.360 --> 00:01:40.440
Ctrl N control and is going to create a new file, 
I'm going to hit Ctrl S. And we are going to save  

00:01:40.440 --> 00:01:47.430
this file. And I'm just going to say app dot j s. 
And this is going to be a very, very simplistic  

00:01:47.430 --> 00:01:54.840
JavaScript file. And we are just going to run it. 
And this is just a test to see if you installed  

00:01:54.840 --> 00:02:07.140
node j s correctly. So if I hit console dot log 
hello world, from node j s. Now if I save this,  

00:02:07.140 --> 00:02:13.920
and I'm actually going to exit out of this, but 
you saw that this just popped up on my screen,  

00:02:13.920 --> 00:02:21.120
if I go to terminal, here is our command prompt. 
So I'm just going to exit this to show you how you  

00:02:21.120 --> 00:02:27.480
can bring this up whenever you want to run code 
using the terminal. So I'm just going to close  

00:02:27.480 --> 00:02:38.310
this. I'm going to hit Ctrl B, I am going to go 
to View, I'm going to go to integrated terminal.  

00:02:38.310 --> 00:02:49.050
Now by default, Visual Studio code has it on 
PowerShell. So if I go up here, you can notice  

00:02:49.050 --> 00:03:01.290
that mine says cmd. So if I hit Ctrl, Shift P and 
type default, I can say select default shell. Now  

00:03:01.290 --> 00:03:06.630
I have three terminals installed on my computer, 
you probably have PowerShell, and you probably  

00:03:06.630 --> 00:03:14.010
have command prompt. And I also have get, go ahead 
and click command prompt. hit this plus button,  

00:03:14.010 --> 00:03:19.680
this is going to bring up a new terminal. So if 
I was to hit this or bring up another CMD, and  

00:03:19.680 --> 00:03:26.310
this should say cmd. So I'm just going to remove 
for me, I'm going to remove one, since I already  

00:03:26.310 --> 00:03:34.440
have one open. And now all I'm going to do is type 
node, and then the name of the file. So the name  

00:03:34.440 --> 00:03:42.600
of the file that we just created was called app 
dot j s. And here we go, we get an output of hello  

00:03:42.600 --> 00:03:50.340
world from node j s. Now let's say that you're 
not using Visual Studio code for whatever reason  

00:03:50.340 --> 00:04:00.000
you have your own editor of choice, what you can 
do is you hit the start menu, type cmd and then  

00:04:00.000 --> 00:04:06.720
go to command prompt. And then you can see that 
we get something very similar to the integrated  

00:04:06.720 --> 00:04:17.070
command prompt, but we're in a different location. 
So if I go to my desktop, open this folder. Let's  

00:04:17.070 --> 00:04:25.680
copy the path that this folder is located. So I'm 
just going to hit Ctrl C to copy, head over to my  

00:04:25.680 --> 00:04:33.930
command prompt. I'm just going to type C the CDs 
stands for change directory. All that means is hey  

00:04:33.930 --> 00:04:40.740
change folder. So right now I am in a folder 
called users Pedram makhado. I need to be in  

00:04:40.740 --> 00:04:51.000
this folder. So now I'm just gonna click this. Go 
down to edit, click paste. And that's our path. So  

00:04:51.000 --> 00:05:01.770
now if I hit Enter, you can see that our path has 
changed. And now if I type node app.js You can see  

00:05:01.770 --> 00:05:08.340
that we get a Hello World from node. So either way 
is fine. If you want to use Visual Studio code and  

00:05:08.340 --> 00:05:14.340
its integrated terminal, you're more than welcome 
to, if you're using a different editor and it  

00:05:14.340 --> 00:05:20.220
doesn't have its own integrated terminal, you're 
more than welcome to use the command prompt.  

00:05:24.590 --> 00:05:31.490
In this tutorial, we're going to be talking about 
node modules, or a node module is is basically  

00:05:31.490 --> 00:05:37.850
a JavaScript file. It's a way to separate 
concerns for our application. So for example,  

00:05:37.850 --> 00:05:46.040
let's say that I have an app.js file. And in 
this app.js file, I have maff, a bunch of API  

00:05:46.040 --> 00:05:52.490
requests and database calls. Instead of putting 
them all on one file, what we can do is separate  

00:05:52.490 --> 00:05:58.760
each of those concerns into their own files. So 
to get started, I'm just going to hit Ctrl. B,  

00:05:58.760 --> 00:06:06.710
I'm going to say Ctrl N. So we're going to create 
a new file. And I'm just going to say Ctrl S and  

00:06:06.710 --> 00:06:14.750
we're going to save it as the tutorial, dot j s. 
Let's save that Ctrl B. And now we could focus on  

00:06:14.750 --> 00:06:22.760
this new file or this new module called tutorial 
dot j s. So to get started, let's actually give  

00:06:22.760 --> 00:06:28.655
our tutorial module something. So I'm going to 
give it a function. So I'm going to say const,  

00:06:28.655 --> 00:06:35.990
some, and it's going to have two parameters, and 
all it's going to do is add and return them. So  

00:06:35.990 --> 00:06:44.990
number one plus number two. Next, what I want to 
end up doing is I want to expose this function  

00:06:44.990 --> 00:06:53.630
to the outside world. Because right now, if I hit 
Ctrl S, and if I was to try to use this function,  

00:06:53.630 --> 00:07:03.380
so I'm just going to delete this. So if I was 
just to say sum, one plus one. And if we were  

00:07:03.380 --> 00:07:09.950
to actually run this, you can see that we get 
an error, some is not defined. So you might be  

00:07:09.950 --> 00:07:18.350
saying, why is some not defined, I just defined it 
here. Well, I need to expose this function for the  

00:07:18.350 --> 00:07:25.160
outside world to use. So I need to let know know 
that this sum function within my tutorial module  

00:07:25.160 --> 00:07:33.860
is available to be used. So in order to do that, 
or I need to do is type module exports, and pass  

00:07:33.860 --> 00:07:44.640
it in some like so. Now that this is available to 
be used, I need to tell my app.js file where this  

00:07:44.640 --> 00:07:51.180
sum function is located. So what I can do here 
is declare a variable. So I'm just going to say  

00:07:51.180 --> 00:07:59.220
Kant's. tutorial. And now I'm just going to use 
the word require. And then we're going to give  

00:07:59.220 --> 00:08:06.780
it a path. Now the path is dot forward slash. 
So where did I get dot forward slash from? dot  

00:08:06.780 --> 00:08:14.550
forward slash means that it's within the same 
exact path that this file is currently in where  

00:08:14.550 --> 00:08:22.320
app dot j s. So if I was to hit Ctrl, B, you 
can see that I that j s is on the same level  

00:08:22.320 --> 00:08:30.000
as the tutorial dot j s, and that they're in the 
same folder called Node JS tutorial. So if I hit  

00:08:30.000 --> 00:08:35.940
Control V, again, get rid of that. And then I 
pass in the name of the file, which is obviously  

00:08:35.940 --> 00:08:42.690
tutorial dot j s. Now you do not need to pass in 
the extension, all you need to do is pass in the  

00:08:42.690 --> 00:08:51.750
name of the file, Node. js automatically assumes 
that it is a JavaScript file. And now, if I was to  

00:08:51.750 --> 00:08:59.130
print out tutorial, two, let's see what's inside 
it. And now let's get rid of our son call. We're  

00:08:59.130 --> 00:09:05.040
gonna call some a little bit later, I just want to 
show you what the variable tutorial has. So if I  

00:09:05.040 --> 00:09:12.180
was to save this, and let's scroll down, I'm going 
to type CLS, hit enter. That's going to clear  

00:09:12.180 --> 00:09:19.680
the terminal. And now I'm just going to run node 
app. And you can see that the tutorial now holds  

00:09:19.680 --> 00:09:28.920
a function called sum from our tutorial module. So 
now if I want to actually use that function, I can  

00:09:28.920 --> 00:09:36.930
say tutorial and pass in one plus one. And let's 
actually print out the results. I'm just gonna say  

00:09:36.930 --> 00:09:48.120
console dot log it. Let's save it, execute it 
again. And you can see that we get our desired  

00:09:48.120 --> 00:09:56.730
output of too and that we are indeed importing 
from our tutorial module, the sum function. So now  

00:09:56.730 --> 00:10:03.990
that we know how to do that, how will we import 
ml To pull stuff from modules. So for example, if  

00:10:03.990 --> 00:10:10.560
we head back to our tutorial module, let's say I 
have multiple functions or multiple variables, or  

00:10:10.560 --> 00:10:19.560
even a class, how do I export more than one thing? 
Well, what you can do is I can say, and just for  

00:10:19.560 --> 00:10:25.770
the sake of example, let's add more stuff. So I 
could say Kant's. Hi, and just gonna set this the  

00:10:25.770 --> 00:10:37.770
3.14. And let's create a class. And I'm gonna say 
some math object. Let's give it a constructor. And  

00:10:37.770 --> 00:10:50.580
I'm just gonna say object created. Okay, so now 
I have some pi and some math object. Now, I want  

00:10:50.580 --> 00:10:58.590
all three of these to be exposed to the outside 
world. So that app.js, for example, can require  

00:10:58.590 --> 00:11:05.100
them and then use it. So how do I do that? Well, 
one way to do that is to add properties to the  

00:11:05.100 --> 00:11:16.110
module dot exports object. So for example, I could 
say dot sum. And I'm just going to copy this. So  

00:11:16.110 --> 00:11:26.910
now experts, that sum is going to have the sum 
function exports.pi is going to hold the value  

00:11:26.910 --> 00:11:38.400
of 3.14. So I just set it equal to pi. And some 
math object, it's going to be madrona exports dot  

00:11:38.400 --> 00:11:46.980
some math object is going to be equal to some math 
object. Now if I was to save this, head over to  

00:11:46.980 --> 00:11:55.350
app, and let's just remove this for now, I want to 
print out what tutorial is holding once we require  

00:11:55.350 --> 00:12:05.050
from our tutorial module. So if I save this, and 
now let's execute this, you can see that we're  

00:12:05.050 --> 00:12:12.250
getting an object back tutorial is now an object. 
And now this object has the properties of sun. And  

00:12:12.250 --> 00:12:19.780
it tells you that it's a function, pi, the value 
of pi, and some math object. And you can see that  

00:12:19.780 --> 00:12:26.560
it's our class. And now if I want to execute this, 
it will be like accessing a normal object. So for  

00:12:26.560 --> 00:12:34.690
example, we have tutorial. And let's say we want 
to use the sum function. So just saying tutorial,  

00:12:34.690 --> 00:12:40.720
and I'm passing the two numbers, I could say 
tutorial, sum, and pass in the two numbers. And  

00:12:40.720 --> 00:12:48.640
I'm just going to copy this. Let's paste this 
two more times. And now if I want to print pi,  

00:12:48.640 --> 00:13:00.640
package, say tutorial, pi. And within here, the 
same thing for the object, I can say new tutorial,  

00:13:00.640 --> 00:13:11.020
dot some math object. And that's going to create 
a new instance of our some math object. And now  

00:13:11.020 --> 00:13:21.100
if I was to save this, and run it, you can see 
that it executes as expected. So tutorial sum,  

00:13:21.100 --> 00:13:28.690
gives us to pi has the value of 3.14. And you 
can see that our constructor gets executed  

00:13:28.690 --> 00:13:37.720
object created. One more thing to show you before 
I wrap this up, if this is an ugly syntax for you,  

00:13:37.720 --> 00:13:45.130
for example, saying module dot exports, that sum 
equals this module.exports.pi is a bit repetitive,  

00:13:45.130 --> 00:13:55.240
what we can do is, instead of exporting each of 
these individually, I'm going to let's remove two  

00:13:55.240 --> 00:14:08.590
of them. And instead, what we can do is export 
an object literal and tag along the properties.  

00:14:08.590 --> 00:14:21.200
So I could say sum is going to be some pie. 
This is going to be pi. And then some math  

00:14:21.200 --> 00:14:30.560
object is going to be some math object. And 
if I'm to save this, and now execute it, we  

00:14:30.560 --> 00:14:37.850
should get the same exact result. So let's execute 
that. You can see that it's working beautifully.  

00:14:42.370 --> 00:14:48.730
And this tutorial, we're going to be talking 
about the events module, particularly the event  

00:14:48.730 --> 00:14:55.480
emitter class within the events module. Now all 
the events module allows us to do is basically  

00:14:55.480 --> 00:15:02.290
bring Event Driven Programming to node j s. So 
to get started, we're going to actually have to  

00:15:02.290 --> 00:15:08.980
require the events module. Now the events module 
is actually built into node j s. So I'm just  

00:15:08.980 --> 00:15:17.200
going to say Kant's. Event emitter. Now this is 
going to be the class that we get from requiring,  

00:15:17.200 --> 00:15:26.710
from the events module, I was just gonna 
say equals require event. Now from here,  

00:15:26.710 --> 00:15:33.220
we're going to have to create a new instance of 
the event emitter. So I'm just going to say const,  

00:15:33.220 --> 00:15:43.360
event emitter, I say, new event emitter. 
So from here, we're going to start getting  

00:15:43.360 --> 00:15:49.720
into Event Driven Programming. Now that I have 
my event emitter object, let's actually attach  

00:15:49.720 --> 00:15:57.280
a listener to it. So I'm just going to say event 
emitter. And I'm going to call the method on now,  

00:15:57.280 --> 00:16:04.450
this method takes on two arguments. One is the 
listener that you want to attach to this object.  

00:16:04.450 --> 00:16:11.050
So I'm just going to call it tutorial for this 
example. And the second argument is going to be  

00:16:11.050 --> 00:16:19.030
the function that you want to execute. When does 
the tutorial event occurs. So let's just pass in  

00:16:19.030 --> 00:16:34.240
this function. And I'm going to say is console dot 
log tutorial event has occurred. So now if I save  

00:16:34.240 --> 00:16:42.280
this and run it, so I'm just gonna hit Ctrl S to 
save. And I'm just gonna say node app, you can see  

00:16:42.280 --> 00:16:49.150
that nothing happens within our terminal. Now, why 
is that? Well, I have this object. I've attached a  

00:16:49.150 --> 00:16:57.070
listener call tutorial. But I haven't emitted 
a tutorial event. Remember, this code here,  

00:16:57.070 --> 00:17:06.940
is only going to be executed when a tutorial event 
occurs. So now let's emit a tutorial event. So I'm  

00:17:06.940 --> 00:17:15.310
just going to say event emitter. And now I'm just 
going to pass in tutorial as the first argument.  

00:17:15.310 --> 00:17:24.250
And that's it. So now, if I was to hit Ctrl, 
S to save, and now execute this one more time,  

00:17:24.250 --> 00:17:34.180
you can see that our tutorial event gets triggered 
whenever we call the emit method. So now what  

00:17:34.180 --> 00:17:41.560
happens when we actually want this function to 
have parameters? Well, I could give a parameter  

00:17:41.560 --> 00:17:49.750
so I could say num, one, num, two. And just for 
argument's sake, so just to show on the console,  

00:17:49.750 --> 00:17:56.800
we're going to print out the sum of number one and 
number two. So now how would I call it down here  

00:17:56.800 --> 00:18:05.590
with the emit method? Well, I'll just pass it in 
an argument. So I could pass in one, and two. So  

00:18:05.590 --> 00:18:14.080
if I save this now, and now go to node app, you 
can see that we get the value of three. So you  

00:18:14.080 --> 00:18:21.520
just pass in the argument. Now, this is all fine 
and dandy. But how would I create a custom object  

00:18:21.520 --> 00:18:27.460
which takes advantage of using events? Well, I 
could just inherit from the event emitter class.  

00:18:27.460 --> 00:18:35.050
So for example, let's say that I want to create a 
person class. So I say class person. And I could  

00:18:35.050 --> 00:18:46.930
just extend from the event emitter class. And 
now from here, let's give it a constructor. Now  

00:18:46.930 --> 00:18:53.020
let's call our super function. So I'm just going 
to say super. And this is going to allow us to  

00:18:53.020 --> 00:18:59.140
use that this property within our class. And now 
I'm just going to say this, that underscore name  

00:18:59.140 --> 00:19:06.610
is going to be assigned value name. And now let's 
actually pass in name to our constructor. And now  

00:19:06.610 --> 00:19:14.920
let's give this person class a getter. So I'm just 
going to say get name. And all this is gonna do is  

00:19:14.920 --> 00:19:24.400
just return this dot underscore name. So now that 
we have our person class defined, let's actually  

00:19:24.400 --> 00:19:32.020
create a new instance of it. So I'm just going to 
go down here. And I'm just going to say, let Pedro  

00:19:32.020 --> 00:19:44.590
equals new person. And let's pass in Pedro. And 
now here remember, when I say new person, person  

00:19:44.590 --> 00:19:52.030
extends the event emitter class, which means that 
Pedro is also an instance of the event emitter  

00:19:52.030 --> 00:19:59.050
class. So now I can add a listener to the page 
or object so I could just say pedro.on and And  

00:19:59.050 --> 00:20:06.880
I'm just going to call it name. And we're going 
to pass in our function. And I'm just going to  

00:20:06.880 --> 00:20:17.830
print out my name is so and so. So I'm just gonna 
say console. dot log, my name is. And we're just  

00:20:17.830 --> 00:20:25.680
going to say Pedro dot name. So now that we've 
attached our listener, obviously, we're going  

00:20:25.680 --> 00:20:31.920
to have to call the emit method. So we're gonna 
emit the event has occurred. So I'm just gonna say  

00:20:31.920 --> 00:20:40.830
Pedro dot emit, and we're gonna pass in name. And 
now if I was to save this, and now execute this,  

00:20:40.830 --> 00:20:48.720
you can see that we get the desired output 
of my name is Pedro. So that's how you would  

00:20:48.720 --> 00:20:56.760
extend using the event emitters class. And for our 
final example, let's say that we have more than  

00:20:56.760 --> 00:21:03.450
one person object, so I'm just going to create a 
new person, I'm just going to call let's make it  

00:21:03.450 --> 00:21:10.530
a girl, I'm just going to call her Christina. I'm 
going to say new person. And we're going to pass  

00:21:10.530 --> 00:21:17.220
in Christina. Now let's add a listener to the 
Christina object. So I'm just gonna say Christina,  

00:21:17.220 --> 00:21:26.070
that on name. And you could use a loop for this. 
But since I'm only creating two person objects,  

00:21:26.070 --> 00:21:34.290
that doesn't make sense for this example, but you 
can use a loop to do this on one shot. And we are  

00:21:34.290 --> 00:21:45.360
just going to copy this. paste this in here, I'm 
just gonna say, Christina, that name. Alright,  

00:21:45.360 --> 00:21:50.640
so why did I go there to bother are showing 
you that we create it to person objects,  

00:21:50.640 --> 00:22:01.350
and attach listeners to it? Well, what I want to 
show you is that when you emit an event to occur,  

00:22:01.350 --> 00:22:08.940
the event gets executed synchronously. So for 
example, if I say, Pedro, and I say, Christina,  

00:22:08.940 --> 00:22:18.870
and now if I was to save this, and now execute it, 
you can see that these get executed synchronously.  

00:22:18.870 --> 00:22:24.930
So because Pedro emitted first, Pedro gets 
executed first and then our Christina object,  

00:22:24.930 --> 00:22:30.300
so they get executed in the order that they 
admitted in so they execute synchronously.  

00:22:35.190 --> 00:22:40.810
In this tutorial, we're going to be talking about 
the read line module. Now, what the read line  

00:22:40.810 --> 00:22:47.710
module allows us to do is prompt the user as well 
as get user input. So to get started, we're going  

00:22:47.710 --> 00:22:55.510
to have to require the module. So I'm just going 
to say const. reline is equal to require read  

00:22:55.510 --> 00:23:01.390
line, and this is going to bring in our relying 
module. Next, we're going to have to create an  

00:23:01.390 --> 00:23:07.990
instance of the read line interface by using the 
Create interface method. So I'm just going to say  

00:23:07.990 --> 00:23:15.820
read line dot create interface. And within here is 
going to take an object. Now we're going to give  

00:23:15.820 --> 00:23:23.020
this object two properties. And this is basically 
our configuration file. So the first property I'm  

00:23:23.020 --> 00:23:29.080
going to give it is input. And then we're going 
to give it an object. Now this object is called  

00:23:29.080 --> 00:23:36.400
process not process is a global object. So you 
don't have to require it. It's already given to  

00:23:36.400 --> 00:23:47.020
us by node. And here we're going to say STD. And 
now input is going to be the STD in input stream.  

00:23:47.020 --> 00:23:54.250
And then here, we obviously need an output. So 
I'm just gonna say output, and we're going to  

00:23:54.250 --> 00:24:02.440
give it process that STD out. And that's going to 
stand for output stream. Now, when this method is  

00:24:02.440 --> 00:24:09.220
executed, is going to return our read line or the 
face object. So let's save it inside a variable  

00:24:09.220 --> 00:24:16.930
so we can use it. So I'm just gonna say const RL 
is equal to this. Now let's say I want to ask the  

00:24:16.930 --> 00:24:23.230
user what two numbers added together are equal to. 
So for this example, I'm just going to generate  

00:24:23.230 --> 00:24:37.270
two random numbers between one and 10. So I'm just 
going to say let num one equal math floor math dot  

00:24:37.270 --> 00:24:46.110
random. And we're going to times this by 10. And 
we're going to shift that over by one. So this is  

00:24:46.110 --> 00:24:58.050
going to give us a random number between one and 
10. It's copied us twice. Paste that, too. And we  

00:24:58.050 --> 00:25:04.680
need the answer. So I'm just gonna say less Answer 
equal number one plus number two. All right. So  

00:25:04.680 --> 00:25:10.440
now that we have this, we're ready to ask the 
user what these two numbers are equal to. Now in  

00:25:10.440 --> 00:25:17.880
order to do that, I'm going to use our read line 
interface. And our relying interface has a method  

00:25:17.880 --> 00:25:24.810
called question. So I'm going to say RL question. 
Now, the first argument is going to be a string,  

00:25:24.810 --> 00:25:31.110
the second argument is going to be a function. And 
basically, the first argument is going to be the  

00:25:31.110 --> 00:25:40.860
question we would like to ask the user. So I'm 
just gonna say back tick, what is not one plus  

00:25:40.860 --> 00:25:54.000
num two? Question mark. And I'm just going to 
hit enter here, because I want you guys to see  

00:25:54.000 --> 00:26:02.310
this on one line. And we're going to include our 
callback. Now, this function is going to get the  

00:26:02.310 --> 00:26:10.500
user input as a parameter. So I'm just gonna say 
user input. And for now, I'm just going to print  

00:26:10.500 --> 00:26:17.730
out user input onto the console, just so you guys 
can see that it's actually working. So now if  

00:26:17.730 --> 00:26:26.940
I was to save this, head over to my console type 
node app, it's going to say what is four plus two,  

00:26:26.940 --> 00:26:34.440
I'm going to say banana. And there you go, it 
prints out the user input. It's important to  

00:26:34.440 --> 00:26:39.360
note that if you take a look at our console, 
the application is still running. So I'm just  

00:26:39.360 --> 00:26:45.810
going to hit Ctrl. C to break out of it. And what 
we need to do is actually close the read line  

00:26:45.810 --> 00:26:52.800
interface when we're done using it. So in order 
to do that, let's actually add a couple of things.  

00:26:52.800 --> 00:26:59.700
First thing, I want a new line, right after this 
question mark here. So I'm just gonna say forward  

00:26:59.700 --> 00:27:06.780
slash n. So when I prompt the user, the users 
input instead of lining up right next to it,  

00:27:06.780 --> 00:27:14.130
like so there's gonna be underneath. Alright, so 
I fixed that problem. Next thing I want to do is  

00:27:14.130 --> 00:27:20.490
actually test the user input to see if he actually 
got the answer. Correct. So in order to do that,  

00:27:20.490 --> 00:27:29.370
I'm just going to say, if user input. And it's 
always important to trim the users input, if you  

00:27:29.370 --> 00:27:35.040
ever accept anything from a user, just to get rid 
of the trailing whitespace. And we're just going  

00:27:35.040 --> 00:27:43.050
to say if the user's input is equal to answer. 
So if they answer the math question correctly,  

00:27:43.050 --> 00:27:52.710
I want to close the application. So I could say, 
RL dot close. And here, and now if I was to save  

00:27:52.710 --> 00:27:58.920
this, and now execute the program, so I'm just 
going to write node app. And it's going to say,  

00:27:58.920 --> 00:28:06.090
What is 10 plus four, and I'm going to answer with 
14. And you can see that we answered it correctly,  

00:28:06.090 --> 00:28:13.830
and therefore our application closed. Now, what I 
want to do is actually add a listener to the close  

00:28:13.830 --> 00:28:22.380
event. Now, the read line interface is actually 
an instance of the event emitter class. So what we  

00:28:22.380 --> 00:28:31.890
can do is actually scroll down here. And I'll add 
it towards the end. And I want to say our own.on.  

00:28:32.880 --> 00:28:40.140
And basically, I'm going to say, hey, I want you 
to listen for an event to occur, I'm going to say  

00:28:40.140 --> 00:28:47.310
close. And we're going to give it a callback. 
And this function is only going to execute when  

00:28:47.310 --> 00:28:53.790
we close the reline interface. So now I'm just 
going to say console dot log. And basically,  

00:28:53.790 --> 00:28:58.740
I just want to let the user know that Hey, you got 
the correct answer. So I'm just gonna say correct.  

00:29:01.400 --> 00:29:09.710
So now if I was to save this, and now execute 
it, node app, what is six plus three, I'm just  

00:29:09.710 --> 00:29:17.420
gonna write nine. You can see that correct, gets 
printed out onto the console. Now correct gets  

00:29:17.420 --> 00:29:23.930
printed out onto the console. Because when we 
use the method close, it emits the close event.  

00:29:23.930 --> 00:29:31.640
And since we're listening for a close event, this 
callback function gets executed. And on that note,  

00:29:31.640 --> 00:29:38.060
I better add a semicolon on there. And let's see 
that. So now that we handled what happens when the  

00:29:38.060 --> 00:29:45.380
user inputs correctly, what happens if the user 
gets the wrong answer? So in order to do that,  

00:29:45.380 --> 00:29:51.380
let's create an else statement within our 
question method here. So I'm just going to  

00:29:51.380 --> 00:30:00.110
say else. And what I want to do basically is re 
prompt the user. So I'm just going to say rl.com.  

00:30:00.110 --> 00:30:09.590
That set prop. And set prompt is basically going 
to take an argument of string. And it's going to  

00:30:09.590 --> 00:30:18.170
ask the user, basically what you want to know. So 
I'm going to say to the user, incorrect response,  

00:30:18.170 --> 00:30:32.720
please try again. And let's add a new line here. 
And now in order to use the Prop, I actually have  

00:30:32.720 --> 00:30:39.350
to call it. So the first method is to set the 
prop. The second method is going to be to call on  

00:30:39.350 --> 00:30:50.780
discussing our prompt. So now, I'm just gonna hit 
Ctrl. S to save. And now I'm just going to execute  

00:30:50.780 --> 00:31:00.470
this node app. And he's gonna say what is one plus 
five, and I'm going to say banana. And it's gonna  

00:31:00.470 --> 00:31:07.460
say incorrect response, please try again. Now, 
I actually haven't told it what to do once the  

00:31:07.460 --> 00:31:14.550
user inputs. So let's actually write the code for 
that. Now, what I'm going to do is actually add a  

00:31:14.550 --> 00:31:22.560
listener to our read line interface. So I'm going 
to listen for the users input. And the event for  

00:31:22.560 --> 00:31:33.330
that is rl.on. Mine. And then we're going to pass 
it in our callback. Now this callback is going to  

00:31:33.330 --> 00:31:42.870
have the user's input. And now we're going to 
decide what to do once we get the user's input.  

00:31:42.870 --> 00:31:54.270
So obviously, what we want to do is check if the 
user's input is correct. And if it is correct, we  

00:31:54.270 --> 00:32:02.640
are going to close the application. And now what 
happens if it isn't correct, we're gonna say else.  

00:32:02.640 --> 00:32:12.930
And then I'm going to reset the prompt. So I'm 
just gonna say R dot set prop. And I'm gonna say,  

00:32:12.930 --> 00:32:20.940
let's actually make this more informative. So I'm 
just gonna say your answer. And then we're just  

00:32:20.940 --> 00:32:31.560
going to print out what they wrote. user input, 
is and correct. And we're going to build a forward  

00:32:31.560 --> 00:32:43.470
slash. And before that, I'm just going to say, try 
again. So now let's enter. And now remember, once  

00:32:43.470 --> 00:32:54.570
we set the Prop, we actually have to call it. So 
now I'm just going to say RL dot prop. And now if  

00:32:54.570 --> 00:33:01.710
we just take a look at what we have so far, this 
is basically going to give us a loop. So we set  

00:33:01.710 --> 00:33:09.540
a line event listener. Now when the user enters 
input that's going to trigger this line input,  

00:33:09.540 --> 00:33:15.900
we're going to test to see if what he gave us is 
correct. And if it is, we're just going to close  

00:33:15.900 --> 00:33:24.240
that but patient. And if we close the application 
this on close method is going to execute,  

00:33:24.240 --> 00:33:32.210
it's going to say, correct. So now let's see what 
happens if we give it the wrong value. Is it going  

00:33:32.210 --> 00:33:36.890
to execute the else statement? And it's going 
to set the prompt your answer have so and so  

00:33:36.890 --> 00:33:43.970
is wrong. And that is going to prompt the user 
again. And basically, this line event is going to  

00:33:43.970 --> 00:33:50.840
keep executing until the user enters the correct 
input. So let's actually take a look at this in  

00:33:50.840 --> 00:33:57.440
action. So I'm just going to clear the terminal. 
And before I execute, let me just say, intro as to  

00:33:57.440 --> 00:34:06.800
say, oops, Ctrl S to save. And now I'm just going 
to hit node app. And it's gonna say what is one  

00:34:06.800 --> 00:34:13.310
plus four, I'm going to say banana. Incorrect 
response, please try again, I'm going to type  

00:34:13.310 --> 00:34:20.180
banana again, your answer banana is not correct. 
And you can see that this will go on indefinitely.  

00:34:20.180 --> 00:34:27.830
Now, if I go back up, and let's actually see 
what it was, what is one plus four, I'm just  

00:34:27.830 --> 00:34:34.490
going to type in five. And you can see we get the 
output of correct and then exit the application.  

00:34:38.880 --> 00:34:45.450
And this tutorial, we're going to be talking about 
the file system module. Now what the file system  

00:34:45.450 --> 00:34:51.780
module allows us to do is work with the file 
system. And what I mean by that is that it allows  

00:34:51.780 --> 00:34:59.820
us to create files, read files, delete files, 
create folders, stuff like that. So to get started  

00:34:59.820 --> 00:35:05.910
We're going to have to require the file module 
into our project. So I'm just gonna say const Fs  

00:35:05.910 --> 00:35:15.000
is equal to require Fs. So now that we have the 
file system module within our node application,  

00:35:15.000 --> 00:35:23.760
let's actually use it. Now. If I hit Ctrl, B, 
you can see that all I have is my app.js file  

00:35:23.760 --> 00:35:30.840
within my Node JS tutorial folder. So let's 
actually create a file. So this one's gonna  

00:35:30.840 --> 00:35:40.680
create a file. And we're going to say Fs dot 
write file. Now, the first argument is going  

00:35:40.680 --> 00:35:48.390
to be the name of the file. So I'm just going 
to say example, dot txt. The second argument is  

00:35:48.390 --> 00:35:56.280
what you want to write to the file. So I'm just 
going to say, this is an example. And the third  

00:35:56.280 --> 00:36:01.560
argument is going to be a callback, and this 
callback is going to have a parameter of error,  

00:36:01.560 --> 00:36:12.420
in case anything goes wrong. So I'm just gonna 
say error. There we go. So let's actually finish  

00:36:12.420 --> 00:36:20.430
writing this. So I could say, if error, we're 
just going to print out the error. Otherwise,  

00:36:20.430 --> 00:36:31.620
we can say, file successfully created. So I'm 
just gonna write file successfully created. So  

00:36:31.620 --> 00:36:42.630
now if I was to save this, and let's run this node 
app, you can see that we get file successfully  

00:36:42.630 --> 00:36:51.240
created. And now if I hit Ctrl, V. good not to be 
in the console. And when I do that, Ctrl B. Now,  

00:36:51.240 --> 00:36:59.910
you can see that we have a newly created file 
called example, dot txt. And if we look in it,  

00:36:59.910 --> 00:37:06.180
we see the data that we wrote to the file. Now 
that we created this file, let's actually read it,  

00:37:06.180 --> 00:37:13.110
let's open up and read it. So if I was to say Ctrl 
V again, and I'm just going to go to App dot j, s,  

00:37:13.110 --> 00:37:22.740
and within this else statement, let's put all 
this code within here. And now I'm going to say  

00:37:22.740 --> 00:37:34.050
Fs dot read file. And within here, the first 
argument, much like the right file method, is  

00:37:34.050 --> 00:37:40.680
going to be the name of the file that you want to 
read. So I'm just going to say example, dot txt,  

00:37:40.680 --> 00:37:46.890
the second argument is going to be the encoding 
type. Now I'm going to leave this blank because  

00:37:46.890 --> 00:37:52.530
I want to show you guys what happens when you 
don't leave an encoding type. And then the third  

00:37:52.530 --> 00:37:58.680
argument is going to take a callback function. 
And this callback function has two parameters,  

00:37:58.680 --> 00:38:08.520
it has error, and it has the file that you 
actually want to read. Now in here, I actually  

00:38:08.520 --> 00:38:13.620
want to show you guys what the file looks like. 
So we're going to do the same thing that we did  

00:38:13.620 --> 00:38:24.090
and the right file method, I'm going to check if 
there's any errors. And if there are no errors,  

00:38:24.090 --> 00:38:38.350
I just want to print the file itself. So now if 
I was to save this, go to node app. Now you'll  

00:38:38.350 --> 00:38:45.040
see that the file was successfully created. And 
then you see that when we print out the file,  

00:38:45.040 --> 00:38:52.840
we get this buffer stream. And then we get this 
bunch of numbers following it. Now the buffer  

00:38:52.840 --> 00:39:02.320
stream stores data and binary. Okay. So what we 
need to do is specify the encoding type that we  

00:39:02.320 --> 00:39:09.640
want it to be displayed as. So up here, we're 
going to go up here. And I'm just going to pass  

00:39:09.640 --> 00:39:24.070
in you TF a. So that's the encoding that I want. 
And now if I was to save this, go to node app. You  

00:39:24.070 --> 00:39:31.480
can see that file was successfully created. And 
we're successfully reading the contents within the  

00:39:31.480 --> 00:39:37.780
file. Alright, so now that we know how to create 
and read files, let's actually cover a few more  

00:39:37.780 --> 00:39:43.810
methods. So what I want to do is start with a 
fresh examples. I'm just gonna comment this all  

00:39:43.810 --> 00:39:50.200
out. I'm just going to highlight everything Ctrl 
backslash, and that's going to comment everything  

00:39:50.200 --> 00:39:58.630
out for me. Now what I want to do is let's say 
that when I created this example dot txt file,  

00:39:58.630 --> 00:40:06.700
that I really didn't mean to call example dot 
txt, let's say I wanted to call it example to,  

00:40:06.700 --> 00:40:14.050
for instance, well, I could use the Rename method. 
So I could do something like this, I can say Fs  

00:40:14.050 --> 00:40:20.530
dot rename, and rename is going to take in three 
arguments. The first argument is going to be  

00:40:20.530 --> 00:40:27.520
example, dot txt. And that's going to be the name 
of the file that we want to rename. The second  

00:40:27.520 --> 00:40:34.480
argument is going to be what we want to rename the 
file to. So I'm just going to say example two, dot  

00:40:34.480 --> 00:40:42.490
txt. And the third argument is going to be their 
callback function, which has a parameter called  

00:40:42.490 --> 00:40:50.320
error. And we're going to do the same thing, as 
we've been doing for all these asynchronous calls,  

00:40:50.320 --> 00:40:58.030
we're just going to say, if error, we're just 
going to print that out to the console. If there's  

00:40:58.030 --> 00:41:06.700
no error, and everything went fine, we're gonna 
say successfully rename the file. So I'm just  

00:41:06.700 --> 00:41:17.020
gonna say successfully rename the file. So now, 
if I hit Ctrl, S to save, and now let's run this,  

00:41:17.020 --> 00:41:25.060
you'll see successfully renamed the file. 
And it says the leader from this, and that's  

00:41:25.060 --> 00:41:31.180
probably because it hasn't updated yet. So if I 
close this, and I'm just gonna hit Ctrl, B. And  

00:41:31.180 --> 00:41:38.650
you can see that within our package explorer, 
that our file has been renamed to example two,  

00:41:38.650 --> 00:41:46.960
dot txt. And if I open this as the same exact 
file that re created, couple more methods that  

00:41:46.960 --> 00:41:53.920
I want to go over. So I'm just going to hit Ctrl. 
B. And let's say that, once I comment this out,  

00:41:53.920 --> 00:42:01.930
let's say that when I was creating the file that 
I forgot to add something towards the end of the  

00:42:01.930 --> 00:42:13.457
file, so what do you want to do, I want to append 
data to the file. So I'm just going to say Fs that  

00:42:13.457 --> 00:42:18.550
a pen file is going to take in three arguments, 
it's going to take in the name of the file, I'm  

00:42:18.550 --> 00:42:26.350
just going to say example, two dot txt, the second 
argument is going to be the data that you want  

00:42:26.350 --> 00:42:36.460
to append to the file. So I'm just going to say 
some data being upended. And the third argument  

00:42:36.460 --> 00:42:44.770
is going to be the callback function. And this 
is going to have an error as a parameter passes  

00:42:45.370 --> 00:42:55.400
and, and we're gonna say if error printed out to 
the console. Otherwise, we're gonna print out that  

00:42:55.400 --> 00:43:10.700
we successfully appended data to the file. So I've 
successfully appended data to file. I'm just gonna  

00:43:10.700 --> 00:43:19.430
move this over so you can see. And now if I save 
this, and execute this, so node app, you'll see  

00:43:19.430 --> 00:43:27.980
successfully appended data to the file. So let's 
actually take a look at our file. And you can see  

00:43:27.980 --> 00:43:34.520
that our file has been changed. So before we had 
this as an example, and then we appended on data  

00:43:34.520 --> 00:43:40.670
to the end of the file. And the last method that 
I want to cover within this tutorial is how do  

00:43:40.670 --> 00:43:47.990
I delete a file. So for example, we did all this 
and let's say that I've had enough with this file,  

00:43:47.990 --> 00:43:55.550
I just want it gone. So let's just comment this 
out. And this is going to be the final method that  

00:43:55.550 --> 00:44:03.440
I go over. So we're just gonna say Fs dot unlink. 
And the first argument is, obviously, you guys  

00:44:03.440 --> 00:44:14.390
should get this by now. It's going to be example, 
two. Example two dot txt. And the second argument  

00:44:14.390 --> 00:44:22.940
is going to be a callback function and have the 
parameter of error. And within here, if ever  

00:44:22.940 --> 00:44:31.640
printed out to the console, if there's nowhere 
where we're just going to say successfully deleted  

00:44:31.640 --> 00:44:48.760
the file successfully. So now if I was to save 
this, and now execute it, you can see successfully  

00:44:48.760 --> 00:44:55.090
deleted the file status up here deleted from 
this. So if I close this, and if I was to  

00:44:55.090 --> 00:45:02.290
hit Ctrl B to bring up the package explorer, 
you can see that the file I no longer exist.  

00:45:07.130 --> 00:45:14.000
And this tutorial is going to be part two of 
my file system modules tutorial. Now in the  

00:45:14.000 --> 00:45:20.450
previous tutorial, we went over using the file 
system module to work with files. And this I  

00:45:20.450 --> 00:45:25.940
want to go over how to work with folders. So to 
get started, we're going to have to require the  

00:45:25.940 --> 00:45:33.800
file system module. So I'm just going to say 
const, Fs equals require, and then Fs here.  

00:45:33.800 --> 00:45:42.620
Alright, and now what I want to do is I'm going 
to say fs.mk Dir. And what MK dir stands for is  

00:45:42.620 --> 00:45:50.390
make directory. And our directory is is a folder. 
So now here, it's going to take in two arguments,  

00:45:50.390 --> 00:45:56.210
one is going to be the folder name that you want. 
So I'm going to give it the value of tutorial. And  

00:45:56.210 --> 00:46:02.750
then we're going to pass in the callback with 
an error. And we're just going to say if error,  

00:46:02.750 --> 00:46:15.110
console dot log error, oh, we successfully created 
the folder so on so say, console, log folder  

00:46:15.110 --> 00:46:24.860
successfully created. So now if I was to 
save this, and now before actually run this,  

00:46:24.860 --> 00:46:30.860
I'm just going to hit Ctrl. b. So you don't see 
that there's any magic happening. So all I have  

00:46:30.860 --> 00:46:41.960
is my Node JS tutorial folder, and app.js file. So 
now, if I go here, type node app, you can see that  

00:46:41.960 --> 00:46:47.690
we get the output a folder successfully created 
and that our tutorials folder has been created.  

00:46:47.690 --> 00:46:54.740
Now let's say that I actually want to delete this 
folder. So I'm just gonna hit Ctrl V again. And  

00:46:54.740 --> 00:47:00.770
this is actually going to give us an error, but 
I'm just going to show you what the error is,  

00:47:00.770 --> 00:47:07.850
is basically going to complain that this folder 
really exists. So I'm just going to say Fs that  

00:47:07.850 --> 00:47:16.010
are m, and r M stands for remove, and then dir and 
that stands for remove folder. Now I'm going to  

00:47:16.010 --> 00:47:21.740
give the folder name, so we call it tutorial. 
And this is also going to take a callback,  

00:47:21.740 --> 00:47:34.130
which gets an error. So now if I say if error, 
console dot log the error, oh, we're gonna say  

00:47:34.130 --> 00:47:46.760
successfully deleted the folder successfully 
deleted the folder. So now if I was to save this,  

00:47:46.760 --> 00:47:56.090
and now execute it, you see that we get an error 
file already exists. And that's because the  

00:47:56.090 --> 00:48:02.600
tutorials folder already exists. And we're trying 
to create another folder named the same thing. So  

00:48:02.600 --> 00:48:07.940
I'm just going to hit Ctrl V. Again, delete that 
tutorial folder, I'm just going to hit delete,  

00:48:07.940 --> 00:48:19.640
confirm that Ctrl V again, let's execute this. 
And you can see that we successfully deleted the  

00:48:19.640 --> 00:48:27.500
folder. So if I go up here, hit control B, you'll 
see that it doesn't exist. So first thing we do is  

00:48:27.500 --> 00:48:34.280
we create a folder called tutorial. And then if 
this is successful, then we're going to delete  

00:48:34.280 --> 00:48:40.220
the folder called tutorial. And you can see by 
output that we successfully deleted the folder.  

00:48:40.220 --> 00:48:46.040
Now this is too fast. And that's why you wouldn't 
be able to see it if we had the package manager  

00:48:46.040 --> 00:48:54.590
open. So now that we know how to create and delete 
a folder, what I want to do now is create a folder  

00:48:54.590 --> 00:49:02.540
and then create a file within that folder. So I'm 
just going to hit control B. And we can leave this  

00:49:02.540 --> 00:49:08.930
make directory. So we're going to make a folder 
called tutorial. And if it's successful, it's  

00:49:08.930 --> 00:49:18.200
going to execute this else block. So let's remove 
this. And then within here, we're going to create  

00:49:18.200 --> 00:49:26.780
our new file. So to do that, I'm just going to 
say Fs dot write file. Now write file is going  

00:49:26.780 --> 00:49:32.900
to take in three arguments. It's going to take and 
the name of the file, but in this case, we've got  

00:49:32.900 --> 00:49:40.880
to give it the full path. So I'm going to say dot 
four slash. And what dot forward slash means is I  

00:49:40.880 --> 00:49:49.190
want you to start relative to App dot j s. And 
then I want you to go inside the folder called  

00:49:49.190 --> 00:49:56.960
tutorial. So I'm just going to hit Ctrl B just to 
show you. So app dot j s start here. There's going  

00:49:56.960 --> 00:50:04.610
to be a folder called tutorials. I'm going to go 
in inside that folder, tutorial. And now I want  

00:50:04.610 --> 00:50:14.930
to you to create the file called example, dot txt. 
So if I hit Control V again, and then the second  

00:50:14.930 --> 00:50:20.450
argument is going to be what the data that you 
want, I'm just going to write 123 doesn't matter  

00:50:20.450 --> 00:50:26.870
for this example. And then the third argument is 
it going to be a callback function which gets an  

00:50:26.870 --> 00:50:36.080
error. And then within here, I'm going to write if 
error, console dot log the error onto the console.  

00:50:36.080 --> 00:50:49.310
Oh, we're gonna write successfully created, file, 
successfully created file. So now let's save this.  

00:50:49.310 --> 00:50:58.160
So I'm just gonna hit Ctrl. S, down here, node 
app. And you can see that it says successfully  

00:50:58.160 --> 00:51:06.350
created file down here. So now if I hit control B, 
and I'm going to go up here and then hit control  

00:51:06.350 --> 00:51:13.010
B, you can see that we have our newly created 
tutorial folder. And within here, we have our  

00:51:13.010 --> 00:51:22.400
example dot txt. So if we go in here, you can see 
it has the data of one, two, and three. Now, what  

00:51:22.400 --> 00:51:29.840
I want to show you is, how would I delete a folder 
that has a file within it. So you might be saying,  

00:51:29.840 --> 00:51:37.430
if I just go back here, hit Ctrl B, that can't 
I just use Fs dot remove directory in order to  

00:51:37.430 --> 00:51:48.090
do this. Well, I am actually just going to comment 
all this out. And what will end up happening if I  

00:51:48.090 --> 00:51:59.910
use the Remove directory function is that is that 
I'll get an error. And the reason for that is,  

00:51:59.910 --> 00:52:07.530
because if I use the Remove directory function, 
it has to be used on a directory or folder that  

00:52:07.530 --> 00:52:14.490
is empty. So just to show illustrate this, 
that's going on right this quick remove  

00:52:14.490 --> 00:52:27.390
directory function. And if there's an error print 
it else, we're just gonna print deleted folder. So  

00:52:27.390 --> 00:52:33.060
I'm just going to hit Ctrl S to save. And I'm 
just going to type CLS to clear the terminal  

00:52:33.060 --> 00:52:40.800
node app. And you can see that we get an error 
directory not empty, that we're trying to remove  

00:52:40.800 --> 00:52:49.830
a directory that has a file within it. So in order 
to fix that, let's delete the file first. So I'm  

00:52:49.830 --> 00:52:57.750
just going to say Fs dot unlink. And the first 
argument is going to be the file. So remember,  

00:52:57.750 --> 00:53:05.580
dot forward slash, and then we have to go into 
the tutorials folder. And then I named the file  

00:53:05.580 --> 00:53:13.470
example dot txt. Next argument is going to 
be a callback function which has an error,  

00:53:14.550 --> 00:53:25.380
I'm just going to say if error, print that out. 
If there's no error, then what I want to do well,  

00:53:25.380 --> 00:53:32.130
if there's no error, that means that I 
successfully deleted the file, which means  

00:53:32.130 --> 00:53:40.260
I can now successfully remove the file. So I'm 
just going to copy this. And I'm going to put this  

00:53:40.260 --> 00:53:53.300
within the else block here. Add some semi colons. 
And now if I was to save this, and now execute it,  

00:53:53.300 --> 00:54:01.550
you can see that we have deleted folder. And you 
can see up here deleted from this. So if I go  

00:54:01.550 --> 00:54:08.570
hit control B, you can see that the folders been 
successfully deleted. So what did we do? First,  

00:54:08.570 --> 00:54:15.770
we deleted the file that was within the folder. 
And then if that was successful, then I wanted  

00:54:15.770 --> 00:54:22.430
to delete the folder itself. Last example that I 
want to do is what happens when there are multiple  

00:54:22.430 --> 00:54:29.540
files within a folder, and you want to delete all 
those files. So I'm going to cheat a little bit,  

00:54:29.540 --> 00:54:35.060
and we're just going to create it within our 
package explorer. So I'm just gonna say new  

00:54:35.060 --> 00:54:42.560
folder, and we're gonna call it example. And I'm 
just gonna give it two files. I'm just gonna say a  

00:54:42.560 --> 00:54:53.630
dot txt. And the second file is going to be b dot 
txt. All right, so now I have my folder and I have  

00:54:53.630 --> 00:55:02.120
my two files. So how would I go about doing this? 
Well, there's a method called Read directory. And  

00:55:02.120 --> 00:55:09.560
what read directory does is it gives you back the 
list of files that you have within that folder. So  

00:55:09.560 --> 00:55:18.230
let's actually call it so I'm just gonna comment 
on this out. comment this out. And then I'm just  

00:55:18.230 --> 00:55:25.970
going to type Fs dot read directory. Now the 
first argument is going to be obviously the  

00:55:25.970 --> 00:55:31.880
name of the directory. And in this case, we call 
it example. And then the second argument is going  

00:55:31.880 --> 00:55:38.300
to be a callback function. first parameter is 
going to be error. And then second parameter  

00:55:38.300 --> 00:55:48.200
is going to have files now files is going to 
be an array with the name of the file. So now,  

00:55:48.200 --> 00:55:56.570
we can test if there's an error, all we're gonna 
do is print out the error, there is no error,  

00:55:56.570 --> 00:56:03.980
we're gonna print out files, I'm just gonna print 
out files just to show you what files contains.  

00:56:03.980 --> 00:56:11.900
So if I save this, run this and the console, 
you can see that we have our two files stored  

00:56:11.900 --> 00:56:20.570
within an array, a dot txt, and B dot txt. So now 
let's actually loop through this array and delete  

00:56:20.570 --> 00:56:32.180
everything. So now I'm just going to say for let 
file of files. And then within here, we can start  

00:56:32.180 --> 00:56:39.980
deleting each file individually. So I could say 
Fs dot unlink. And then we're going to give it  

00:56:39.980 --> 00:56:48.650
the file name. So it's going to be dot forward 
slash, example, then it's going to be the name  

00:56:48.650 --> 00:56:57.620
of the file. After that is going to take in an 
argument callback for an error. And if there  

00:56:57.620 --> 00:57:04.190
was a problem deleting that file, it's going to 
print it out to the console. If there wasn't,  

00:57:04.190 --> 00:57:14.030
we're just going to say, successfully deleted 
file. So and So So, so successfully. deleted  

00:57:14.030 --> 00:57:25.520
file. So now if I was to save this, and now 
execute this, you can see successfully deleted  

00:57:25.520 --> 00:57:34.610
file once twice. And if I hit Ctrl, B, you can 
see that we have an empty folder called example.  

00:57:38.300 --> 00:57:44.080
In this tutorial, we're going to be talking about 
the readable and writable screens. Now what these  

00:57:44.080 --> 00:57:50.980
screens allow us to do is basically be able to 
read and write data more efficiently. And the  

00:57:50.980 --> 00:57:56.590
way that they accomplish this is by reading and 
writing data, and chunks as opposed to reading and  

00:57:56.590 --> 00:58:03.370
writing the data all at once. So to get started, 
we're going to have to require the FS module or  

00:58:03.370 --> 00:58:12.070
the file system module. So I'm just going to say 
const. fs is equal to require Fs. Now that we have  

00:58:12.070 --> 00:58:17.500
our file system module included, we're going to 
create a readable stream. And there's a method  

00:58:17.500 --> 00:58:25.270
called Fs dot create reach screen. And now I need 
to give it the path. So if I just hit Ctrl, B,  

00:58:25.270 --> 00:58:33.040
you can see that I have an example dot txt file 
here, and it has a bunch of texts that we're  

00:58:33.040 --> 00:58:39.400
going to be reading in. So if I head back to App 
dot j, s, hit Ctrl V, again, we're just going to  

00:58:39.400 --> 00:58:48.130
give it the path of dot forward slash, example 
dot txt. And then that's it. Now this is going  

00:58:48.130 --> 00:58:54.970
to return to us a readable stream. So I'm just 
gonna save it within a variable. I'm just gonna  

00:58:54.970 --> 00:59:05.560
say cons reach stream is equal to Fs dot read 
stream. And then here, what we can do is listen  

00:59:05.560 --> 00:59:11.740
for an event. Now the return object inherits 
from the event emitter class. So that means we  

00:59:11.740 --> 00:59:18.580
could listen for events to occur. And one event 
that we want to listen for is the data event. So  

00:59:18.580 --> 00:59:26.770
I'm just going to say read stream.on data. And 
then this is going to take a callback function.  

00:59:26.770 --> 00:59:35.560
And now we're going to get a chunk of data and 
return. So every time we read a piece of data,  

00:59:35.560 --> 00:59:42.700
this event data is going to be invoked. So this 
callback function is going to be called every  

00:59:42.700 --> 00:59:52.200
time we get a piece of data. So now I'm just going 
to print out the data onto the console. And you're  

00:59:52.200 --> 00:59:57.810
going to see why I call it a chunk and not the 
full file in a second. So now if I save this,  

00:59:57.810 --> 01:00:08.430
go to node And you can see that we read this data 
within two chunks. So we have to print out here,  

01:00:08.430 --> 01:00:15.210
we have a buffer here, and a buffer here. So 
let's actually set the encoding type. So it's  

01:00:15.210 --> 01:00:23.880
a lot easier to what the sources, and we're just 
going to set it to UTF, eight, and save this. And  

01:00:23.880 --> 01:00:30.870
now let's rerun this application. And there you 
go, you see that we read our text file. So what  

01:00:30.870 --> 01:00:37.800
are the benefits are reading this in a chunk, as 
opposed to loading the whole file? Well, for one,  

01:00:37.800 --> 01:00:45.870
when I get this chunk, I could immediately start 
manipulating that chunk. So I don't have to wait  

01:00:45.870 --> 01:00:52.080
for the whole file to load in order to manipulate 
it. Or let's say that I don't want to manipulate  

01:00:52.080 --> 01:00:58.740
this chunk of data that I got already, I want 
to send it to a new file, well, I could start  

01:00:58.740 --> 01:01:06.180
sending that data to a new file, while I'm reading 
in the data itself. So let's actually send it to a  

01:01:06.180 --> 01:01:11.790
new file. And for that, we're gonna have to create 
a writable stream. So I'm just going to go here.  

01:01:11.790 --> 01:01:25.440
And I'm going to say const. Right stream is equal 
to Fs dot create, write stream. And within here is  

01:01:25.440 --> 01:01:30.510
going to be the name of the file that I want to 
write to. So I'm just going to call it example  

01:01:30.510 --> 01:01:39.720
two dot txt. And now within here, what I can do 
is, instead of waiting to get the whole data,  

01:01:39.720 --> 01:01:46.320
I can start writing chunks to the new file. 
So within here, instead of just printing out  

01:01:46.320 --> 01:01:56.520
console dot log, chunk, I can say, right stream 
dot, right. And I could write this data to a new  

01:01:56.520 --> 01:02:04.760
file as I'm reading it. And so I could say chunk 
here. And let's say that. And now if I run this  

01:02:04.760 --> 01:02:15.080
application node app. So now if I hit Ctrl, B, you 
guys see our newly created file. And if I go here,  

01:02:15.080 --> 01:02:23.390
you can see that we wrote onto a new file. So 
basically, what's happening here is I'm able to  

01:02:23.390 --> 01:02:32.030
write chunk by chunk, and our example two chunks, 
in order to get the full file, I'm able to start  

01:02:32.030 --> 01:02:38.810
writing before the file is fully loaded. And 
that's pretty much the power of using a stream.  

01:02:43.690 --> 01:02:49.110
This tutorial, I'm going to show you guys why you 
should be using streams by trying to read a very,  

01:02:49.110 --> 01:02:55.380
very large text file. So to get started, I'm just 
going to show you how big the file is. So I'm just  

01:02:55.380 --> 01:03:02.640
going to hit Ctrl. B, we have our large file dot 
txt file here. And if I click review and explorer,  

01:03:02.640 --> 01:03:12.180
right click Properties, you can see that the size 
it's about 2.7 gigs. So let's actually take a look  

01:03:12.180 --> 01:03:21.300
at what would happen if we were to use the read 
file method from the file system module. So now,  

01:03:21.300 --> 01:03:29.520
if I was to execute this and type node app, you 
see that we get an error and the error says file  

01:03:29.520 --> 01:03:36.600
size is greater than the possible buffer. Now, 
what does that mean? Well, the read file uses a  

01:03:36.600 --> 01:03:46.710
buffer, but it uses a full buffer. Now what that 
means is that I need at least 2.7 gigs in memory,  

01:03:46.710 --> 01:03:55.650
in order to load this file, because this file has 
to be loaded, because this file has to fit within  

01:03:55.650 --> 01:04:01.290
the buffer. And it's saying, Hey, your buffer 
size is just too small for this file. Now, I'm  

01:04:01.290 --> 01:04:06.480
just going to comment this out. And now what we're 
going to use is a readable stream. So I'm just  

01:04:06.480 --> 01:04:13.740
going to comment this out. And then we're going to 
uncomment this. And by the way, I have tutorials  

01:04:13.740 --> 01:04:21.660
on both readable streams and using the read file 
method. So now I have the stream will look what  

01:04:21.660 --> 01:04:29.970
happens when I execute the code now. So if I was 
to save this, and now execute it, you can see  

01:04:29.970 --> 01:04:37.470
that are readable stream has absolutely no problem 
reading this file. So I'm just going to hit Ctrl C  

01:04:37.470 --> 01:04:44.130
to cancel this, because I don't want it to finish, 
you know loading the entire thing. But why can  

01:04:44.130 --> 01:04:52.920
this be accomplished with streams but not using 
this read file method? Well, one, a stream uses a  

01:04:52.920 --> 01:05:00.180
buffer awesome, but it doesn't use a full buffer. 
It uses a very, very small buffer and what That  

01:05:00.180 --> 01:05:07.710
allows us to do is basically what's happening is 
that you're ending out reading the file in chunks,  

01:05:07.710 --> 01:05:14.310
you're not reading the entire file at once. So 
basically, every time a data event occurs, I am  

01:05:14.310 --> 01:05:20.610
getting a chunk of the file, I'm not attempting 
to read the entire file at once. And therefore,  

01:05:20.610 --> 01:05:27.150
the buffer size could be a lot smaller, as opposed 
to a read file method, which uses a full buffer,  

01:05:27.150 --> 01:05:34.020
which needs to be big enough to load the entire 
file at once. And then server streams allow for  

01:05:34.020 --> 01:05:40.080
smaller buffer size, which is memory efficient. 
And for data to be read and written and chunks.  

01:05:44.130 --> 01:05:49.130
And this tutorial, we're going to be going 
over pipes. Now what a pipe allows us to  

01:05:49.130 --> 01:05:54.410
do is basically take a source stream, which is 
just a readable stream, and send it over to his  

01:05:54.410 --> 01:06:01.010
destination, which is just a writable stream. 
So in the last tutorial, we went over readable  

01:06:01.010 --> 01:06:07.400
streams and writable streams. And basically what 
we did was create a read stream. And then from  

01:06:07.400 --> 01:06:12.920
there, we create a write stream. And then we 
attached an event listener to the reach stream.  

01:06:12.920 --> 01:06:19.460
And every time we got a data event emitted, we 
read a piece of the chunk from the read stream,  

01:06:19.460 --> 01:06:25.610
and then rewrote out that chunk to where we 
wanted to send it. So there's actually a much  

01:06:25.610 --> 01:06:31.670
more simpler way. And the much more simpler way 
is just to get rid of this. And all we're going to  

01:06:31.670 --> 01:06:42.650
do is say restream dot pipe. Now pipe is going to 
take what restream gives us and it's going to pipe  

01:06:42.650 --> 01:06:54.110
it into our right stream. So now if I was to bring 
up the terminal, and just type node app, and hit  

01:06:54.110 --> 01:07:04.370
Ctrl V, you can see we have our example Tex. And 
then we created our example two dot txt. So the  

01:07:04.370 --> 01:07:11.330
pipe method is basically a shorthand version for 
all that stuff that we wrote in the last tutorial.  

01:07:11.330 --> 01:07:18.110
So all we need to remember is, in order to use 
a pipe, we need two streams, we need a source  

01:07:18.110 --> 01:07:24.080
stream. And we also need a destination stream. 
In our case, the reach stream is our source,  

01:07:24.080 --> 01:07:30.260
this is the file that we want to read in, then 
we call the pipe method on the retrieve. And then  

01:07:30.260 --> 01:07:36.980
this is going to take the destination where do we 
want to send this data to, and that's to the right  

01:07:36.980 --> 01:07:44.630
stream. So now I want to talk about pipe chaining. 
So let's give a more complicated example. And for  

01:07:44.630 --> 01:07:51.620
that, I'm going to bring in another module. And 
I'm going to bring in Kant's z lib. Now z lib  

01:07:51.620 --> 01:07:58.950
is a module that is for basically compression, 
compressing files, I'm just going to say require  

01:07:58.950 --> 01:08:09.390
z lib. Now what we're going to do is create a 
transform stream. Now, what a transform stream is  

01:08:09.390 --> 01:08:16.620
basically is what it does is it takes the input. 
So for example from our read stream, and then when  

01:08:16.620 --> 01:08:22.860
it receives that data, it manipulates that data 
into something else. And in this case, what it's  

01:08:22.860 --> 01:08:29.160
gonna do is compress the data. So I'm just going 
to create a transform stream. So I'm just gonna  

01:08:29.160 --> 01:08:41.070
say cons. Gs is equal to z lib dot create jesup 
call that method. Now this is going to return  

01:08:41.070 --> 01:08:50.670
our transform screen. And now within here, a set 
of saying reach dream, what I can do is send that  

01:08:50.670 --> 01:09:06.300
data that reach stream is giving us and I could 
pipe it into our Gs. Now what GS is going to do  

01:09:06.300 --> 01:09:13.830
is take the chunks of data that is reading at a 
time, and it's going to manipulate it and compress  

01:09:13.830 --> 01:09:20.160
it basically. So you're going to get a compressed 
version of the read stream. And then from here,  

01:09:20.160 --> 01:09:27.030
we're going to pipe it out to our destination, 
which is our right stream. So now if I was to  

01:09:27.030 --> 01:09:39.000
run this, let's save it. Now I'm just going to hit 
Ctrl B. And if we go here to example, two dot txt,  

01:09:39.000 --> 01:09:46.590
you can see that we accidentally did not change 
the type and that's my fault. So the type that  

01:09:46.590 --> 01:09:55.140
we're creating create write stream should not be 
a txt file. It should be a.gz file and that's the  

01:09:55.140 --> 01:10:02.820
compression type. So I'm just going to save this 
and let's run this application. Again. Now I'm  

01:10:02.820 --> 01:10:11.910
going to hit Ctrl B. And you can see that we get 
an example two.txt.gz file. Now, if I clicked it,  

01:10:11.910 --> 01:10:17.730
it's going to say that Visual Studio Code cannot 
open this. So I'm just going to right click it,  

01:10:17.730 --> 01:10:25.770
reveal an explorer. And you can see that zip 
file is basically a compressed file. And I'm  

01:10:25.770 --> 01:10:33.780
going to double click it. And you can see that 
our example two dot txt files here and with our  

01:10:33.780 --> 01:10:42.030
tax. So now let's give just one more example just 
to get the hang of it, chaining pipes and using  

01:10:42.030 --> 01:10:48.780
a transform stream. So we saw what happens when 
we compress the file and then write it. So let's  

01:10:48.780 --> 01:10:54.750
go and reverse, we're going to take our source, 
which is compressed, we're going to uncompress it,  

01:10:54.750 --> 01:11:01.290
and then we're going to write it. So from here, 
let's just go back to Visual Studio code. Let's  

01:11:01.290 --> 01:11:09.210
go back to App dot j s Ctrl V. And instead 
of saying create jesup, what we want to do  

01:11:09.210 --> 01:11:17.520
is create unzip. So I'm just going to go here and 
say create g unzip. And we're going to change this  

01:11:17.520 --> 01:11:23.800
variable to unzip. And now this is going to be our 
transform stream. So I'm just going to copy this,  

01:11:23.800 --> 01:11:31.390
paste that here. And now what happened, well, 
read stream has changed, right, so now I want  

01:11:31.390 --> 01:11:37.240
the compressed version of it. So let's go over 
here, we're going to get rid of the encoding  

01:11:37.240 --> 01:11:44.350
type. The compressed file is called example 
two dot txt Gz. So I'm just going to copy this,  

01:11:44.350 --> 01:11:53.980
I'm going to paste this in here. Now this input, 
this reach stream is going to be piped to G unzip,  

01:11:53.980 --> 01:11:59.500
which is going to basically uncompress the 
file, and then it's going to send it off to our  

01:11:59.500 --> 01:12:06.280
destination. So what do we want our destination to 
be called, we could pretty much name this anything  

01:12:06.280 --> 01:12:14.470
you want. So I'm just gonna say uncompressed dot 
txt. So now if I was to go ahead and save this  

01:12:14.470 --> 01:12:25.150
type node app, execute it, we hit Ctrl B. And 
you can see that we have our uncompressed txt  

01:12:25.150 --> 01:12:34.060
file. So if I click this, you can see our example 
Texas here, and that is successfully uncompressed.  

01:12:38.690 --> 01:12:46.250
In this tutorial, we're going to go over the HTTP 
module. Now what the HTTP module allows us to do  

01:12:46.250 --> 01:12:53.480
is basically create a web server with node j s. 
So to get started, we're gonna have to require  

01:12:53.480 --> 01:13:05.540
the HTTP module. So I'm just gonna say const. 
HTTP is equal to require HTTP. Now from here,  

01:13:05.540 --> 01:13:13.700
we can call method called create server. And this 
is going to give us a HTTP server object. So I'm  

01:13:13.700 --> 01:13:22.910
just going to say const server is equal to http 
dot create server. Now, this method is going to  

01:13:22.910 --> 01:13:31.490
take a callback and this callback is going to give 
us a request object as well as a response object.  

01:13:31.490 --> 01:13:40.700
So let's just do that. Now, the request object is 
what the client requests from us. So for example,  

01:13:40.700 --> 01:13:49.280
if I am on Google Chrome, and I type in 
www.google.com, I am requesting something  

01:13:49.280 --> 01:13:55.070
from Google. Now Google server is going to 
take that request, and it's going to send me  

01:13:55.070 --> 01:14:02.450
a response back. So the most simplistic example 
that I could give you is I could send a basic  

01:14:02.450 --> 01:14:09.080
text back to the client. So I could say rez, and 
that's going to be my response, I'm going to say,  

01:14:09.080 --> 01:14:17.480
right, and I'm just going to pass in a string. So 
I'm just going to say, Hello world, from node j,  

01:14:17.480 --> 01:14:24.320
s. Now within here, I haven't actually sent the 
response back, I just told it what it is. So in  

01:14:24.320 --> 01:14:31.070
order to send the response, I'm going to say 
res dot. And now this is going to take care of  

01:14:31.070 --> 01:14:39.170
our HTTP dot create server method. Now there's one 
more thing that we have to do to get the server up  

01:14:39.170 --> 01:14:46.640
and running. And that's the total node j s. What 
port that I want to listen for requests that song  

01:14:46.640 --> 01:14:58.010
is going to say server dot listen. And we're gonna 
listen on port 3000. So now if I was to save this,  

01:14:58.010 --> 01:15:06.590
and now go down, Here type of node app, you can 
see that our server is up and running. Now I'm  

01:15:06.590 --> 01:15:17.900
going to go to Chrome. And within here, I'm going 
to type local host, colon, and then the port,  

01:15:17.900 --> 01:15:24.290
which we assigned was 3000. So that's where 
we're listening for requests that if I hit Enter,  

01:15:24.290 --> 01:15:31.745
you can see that we get a response back 
from the server, hello world, from node j,  

01:15:31.745 --> 01:15:41.210
s. So now from here, what we can do is actually 
listen to requests, different routes. So let's  

01:15:41.210 --> 01:15:48.200
actually take a look at a property of the request 
object. And one of the properties is called URL.  

01:15:48.200 --> 01:15:54.880
So instead of just saying, hello world, from node 
j, s, I only want to say hello world from node j.  

01:15:54.880 --> 01:16:05.300
s, if it is the root domain, so I'm just gonna 
say request dot URL is equal to forward slash,  

01:16:05.300 --> 01:16:16.730
then I'm gonna say res dot write Hello, world 
from Node JS. And then don't forget that we  

01:16:16.730 --> 01:16:24.380
have to send the response back to the client. 
So we're going to call resident and and now if  

01:16:24.380 --> 01:16:30.830
I was to save this, and we're going to is going 
to hit Ctrl. C to kick us out of the server. And  

01:16:30.830 --> 01:16:36.170
then we're going to start the server back 
up again. So we get our updated changes,  

01:16:36.170 --> 01:16:44.610
we're going to go back to Chrome, hit Enter. And 
you can see that it works exactly the same. If we  

01:16:44.610 --> 01:16:51.420
were to add an else statement here. So let's 
say they are not using the root domain, aka,  

01:16:51.420 --> 01:17:02.850
say rez dot write using some other domain, and 
then we're going to send that out to the user. And  

01:17:02.850 --> 01:17:11.670
that's actually Ctrl. C this to stop the server. 
And before we start up the server, I have to save  

01:17:11.670 --> 01:17:22.680
so I'm just gonna say Ctrl. S to save node app. 
And now here, instead of localhost colon 3000.  

01:17:22.680 --> 01:17:30.180
I'm going to say local hosts, banana. And let's 
see what response we get. And the response we get  

01:17:30.180 --> 01:17:36.930
back is using some other domain. Now this response 
is going to be for anything we type because we  

01:17:36.930 --> 01:17:43.470
put it in the else block. So if I type that, I'm 
going to get the same response. And then if I go  

01:17:43.470 --> 01:17:51.600
back and just have the forward slash, you can see 
that we get the Hello World from node j s output.  

01:17:55.870 --> 01:18:02.320
And this tutorial, we're going to be going over 
how we can serve static files, using the HTTP  

01:18:02.320 --> 01:18:09.610
and file system module. So to get started, I'm 
just going to hit Ctrl. B to bring up the package  

01:18:09.610 --> 01:18:18.310
explorer. And you can see that we have a static 
folder. And we have three static files. Now, these  

01:18:18.310 --> 01:18:27.130
files is a JSON file, an image, a PNG file, and an 
index dot HTML file. So what I want to do is make  

01:18:27.130 --> 01:18:33.310
a request to the server and have the server send 
these files back to me. So I'm just going to hit  

01:18:33.310 --> 01:18:39.070
Ctrl B to get rid of that. And the first thing 
we're going to do is actually required modules  

01:18:39.070 --> 01:18:47.560
on this gonna say const, HTTP equal require HTTP. 
And then our second module is going to be the file  

01:18:47.560 --> 01:18:55.990
system modules, I'm just gonna say require Fs. 
Now, first step to do this is to actually create  

01:18:55.990 --> 01:19:03.430
the server. So I'm just gonna say HTTP dot create 
server. And this is going to take a callback,  

01:19:03.430 --> 01:19:10.660
and we're gonna have a request object and a 
response object. Now I'm going to call a method on  

01:19:10.660 --> 01:19:17.590
that server object. So I'm just going to say that 
listen, and we're going to listen on port 3000.  

01:19:17.590 --> 01:19:27.220
Now, let's say that I want to read in a HTML file, 
for instance. So let's go up here. And what I can  

01:19:27.220 --> 01:19:33.610
do is create a readable stream. So I'm just going 
to say can't reach dream, it's going to be equal  

01:19:33.610 --> 01:19:42.160
to Fs. dot create, reach dream. And then within 
here, we're going to pass in the path. So I'm  

01:19:42.160 --> 01:19:48.730
going to say dot forward slash, because it's going 
to be relative to App dot j s. Now I need to go  

01:19:48.730 --> 01:19:56.260
inside the static folder. And then the name of the 
file that I want read in is called index dot HTML.  

01:19:56.260 --> 01:20:06.490
Now what I want to do is actually write a header 
for my response. Now what a header is responsible  

01:20:06.490 --> 01:20:14.090
for is the let the client know what kind of data 
that I am expecting. So I'm just gonna say rez,  

01:20:14.090 --> 01:20:23.240
that right head. And then within here, we're 
going to pass in the HTTP status code. So  

01:20:23.240 --> 01:20:30.320
I'm going to pass in 200. Now 200 means that 
everything went okay with your request. And  

01:20:30.320 --> 01:20:35.930
then the second argument is going to be what the 
content type, so I'm just going to hit content  

01:20:35.930 --> 01:20:46.100
type. And then we're gonna pass in text slash 
HTML. All right, so now that we've written our  

01:20:46.100 --> 01:20:51.830
header, I'm just going to take you guys to Google 
Chrome real quick just to look up the status  

01:20:51.830 --> 01:21:01.010
codes. Now you can see that HTTP 200 means that 
the request has been successfully completed. So  

01:21:01.010 --> 01:21:07.730
whatever the user requested from the server, that 
means everything went fine, as I said, and there's  

01:21:07.730 --> 01:21:15.320
a bunch of HTTP status code. So let's look at 
another one. So another common one is four, four.  

01:21:15.320 --> 01:21:22.940
So you're going on a website, and you accidentally 
Miss type the URL and they give you a not found  

01:21:22.940 --> 01:21:31.070
error. So that would be a 404 error. Now, let's go 
back to our Visual Studio code. And let's complete  

01:21:31.070 --> 01:21:37.400
this, I'm just going to go down here. And within 
here, I'm just going to pipe the reach stream into  

01:21:37.400 --> 01:21:43.580
where I want to send it. So I'm just going 
to say reach stream dot pipe. And where do I  

01:21:43.580 --> 01:21:49.520
want to send this file, I want to send it to the 
user. So I'm going to pass in rez, now read the  

01:21:49.520 --> 01:21:57.260
response object is also a writable stream. So I'm 
piping it to the response object. So now I'm just  

01:21:57.260 --> 01:22:04.940
going to save this. Let's go back to Chrome. I'm 
going to go here, Google, and I'm going to type  

01:22:04.940 --> 01:22:16.190
localhost 3000. And I should probably be noted 
that you should start up your node applications,  

01:22:16.190 --> 01:22:25.640
I'm just gonna type node app. Now let's go back to 
Google Chrome, hit refresh. And you can see that  

01:22:25.640 --> 01:22:32.630
our HTML file has been successfully sent. So let's 
actually try to send the other static files. And  

01:22:32.630 --> 01:22:42.980
this was pretty much straightforward. So all we 
have is if I hit Ctrl, B is an image and a JSON  

01:22:42.980 --> 01:22:50.570
file. So I'm just going to hit Ctrl V, again, 
now all we need to do is obviously change the  

01:22:50.570 --> 01:22:59.600
file that we're reading in. So instead of index 
dot HTML, let's do example dot JSON. Now I'm the  

01:22:59.600 --> 01:23:08.330
content type is obviously not a text slash HTML 
file. So we're gonna have to pass in application  

01:23:08.330 --> 01:23:20.900
slash JSON. And now, if I was to save this, hit 
Ctrl C, so we're going to restart the server, I'm  

01:23:20.900 --> 01:23:30.470
just going to clear out the terminal node app. Now 
let's hit refresh. And you can see that our JSON  

01:23:30.470 --> 01:23:38.840
file gets loaded and sent to the client. Now let's 
load up that image. So now the same exact thing,  

01:23:38.840 --> 01:23:44.870
I'm just going to hit Ctrl B, because I forgot 
when I named the image, I named it example dot  

01:23:44.870 --> 01:23:54.800
png. So I'm just gonna change this to P and G. And 
instead of application dot JSON, we're gonna just  

01:23:54.800 --> 01:24:04.280
gonna remove this. And we're just going to go here 
and type image slash PNG. So now if I was to save  

01:24:04.280 --> 01:24:12.170
this, now, we got to restart the server Ctrl C to 
cancel that out, no app. Now, if I go to Chrome,  

01:24:12.170 --> 01:24:20.870
hit refresh, you can see that my image has been 
loaded. So that's basically the ins and outs  

01:24:20.870 --> 01:24:28.460
of how you would serve a static file using the 
HTTP module, as well as the file system module.  

01:24:33.080 --> 01:24:38.890
In this tutorial, we're going to be going over 
how we can create our package dot JSON file.  

01:24:38.890 --> 01:24:47.230
Now what the package dot JSON file is responsible 
for is basically holding all our metadata for our  

01:24:47.230 --> 01:24:54.610
project, metadata being the name of the project, 
the version number, etc. So to get started,  

01:24:54.610 --> 01:25:00.760
what we're going to use is called the node package 
manager. So I'm just going to type NPM And then  

01:25:00.760 --> 01:25:08.530
I'm going to type in net, which means initialize, 
I hit Enter. And you'll see that we get a bunch of  

01:25:08.530 --> 01:25:15.430
jargon. So what do we want to name, the package, 
by default is going to be called the name of the  

01:25:15.430 --> 01:25:22.570
folder that you're currently in. So up here, you 
can see no GS underscore tutorial. And it says the  

01:25:22.570 --> 01:25:29.020
default will be no GS slash tutorial. So I could 
just hit enter, that's fine with me the version  

01:25:29.021 --> 01:25:36.371
number 1.0 dot zero, that's okay. Description. 
So what is this package about? What is your  

01:25:36.371 --> 01:25:43.300
project about? And we're just gonna say tutorial, 
because that's what we're using it for. And then  

01:25:43.300 --> 01:25:49.480
the entry point is pretty important. And it lets 
us know which file should be used to start our  

01:25:49.480 --> 01:25:56.590
node application. So for example, if I was making 
a website and uploaded to a server, it will let  

01:25:56.590 --> 01:26:03.160
the server know that that was our entry point 
to our application. Test command. Let's ignore  

01:26:03.160 --> 01:26:10.300
that for now. Enter, and Git repository is pretty 
self explanatory. Is it going to be your Git URL,  

01:26:10.300 --> 01:26:18.760
hit enter keywords, we're gonna leave that blank 
as well. Author, go ahead and write down your  

01:26:18.760 --> 01:26:28.330
name. license is C as defined by me, then it's 
gonna say Is this okay? And we're just gonna say,  

01:26:28.331 --> 01:26:35.380
yeah, that's fine. So you might think that 
nothing has happened. But if I hit Ctrl, B,  

01:26:35.380 --> 01:26:42.910
you can see that we have our package dot JSON 
file created. And if I take a look at this,  

01:26:42.910 --> 01:26:50.470
open it up, you can see that package dot JSON is 
just a JSON file. And it has our configuration  

01:26:50.470 --> 01:27:00.970
setting. So the name, the version description of 
our application, the entry point, scripts, author,  

01:27:00.970 --> 01:27:09.460
and license. And basically, in the next tutorial, 
what we're going to end up doing is actually  

01:27:09.460 --> 01:27:15.970
going out and installing external packages 
and including them within our own project.  

01:27:20.500 --> 01:27:26.820
This tutorial, we're going to be going over to 
node package manager in order to install packages.  

01:27:26.820 --> 01:27:35.310
Now our package is is basically reusable code that 
we can include within our own application, it's a  

01:27:35.310 --> 01:27:40.980
folder with one or more modules within it. So to 
get started, we're actually gonna head over to  

01:27:40.980 --> 01:27:49.890
Chrome real quick. And there's actually a website 
called NPM, J s.com. Now NPM, J s.com is where  

01:27:49.890 --> 01:27:56.880
we can actually look and discover new packages 
that we can include within our application. So  

01:27:56.880 --> 01:28:01.710
I'm just going to pick out a package, and we're 
going to install it and then use it. So I'm just  

01:28:01.710 --> 01:28:10.320
going to scroll down. And you could use the search 
up here. Or, let's just pick a popular package.  

01:28:10.320 --> 01:28:18.600
So you can see packages that a lot of people are 
installing. and scroll down more. And let's pick  

01:28:18.600 --> 01:28:27.360
lower das. And then here, we're given a bunch of 
instructions. So it says in order to install this  

01:28:27.360 --> 01:28:35.580
package, I just have to type in this command NPM 
i i in shorthand for install, and then the name of  

01:28:35.580 --> 01:28:42.720
the package. So in this case, the packages name is 
lodash. So if I head back to Visual Studio code,  

01:28:42.720 --> 01:28:56.370
and I type NPM, install lodash. You can see that 
it goes out, and it downloads the package for me  

01:28:56.370 --> 01:29:02.730
automatically. And now if I head back to my 
package dot JSON file, the JSON file that we  

01:29:02.730 --> 01:29:09.660
created in the previous tutorial, you'll notice 
that we have an extra property. And within this  

01:29:09.660 --> 01:29:15.900
property is called dependencies. And then it 
gives us the name of the package we installed,  

01:29:15.900 --> 01:29:24.480
as well as the package version that we installed. 
So now if I was just to hit Ctrl, B, you would see  

01:29:24.480 --> 01:29:30.870
that we have a extra folder and this extra folder 
is called node modules. So if I opened this up,  

01:29:30.870 --> 01:29:39.180
you can see that our lodash installation is 
stored here within this folder. So now this  

01:29:39.180 --> 01:29:45.780
is all fine and dandy, but how would I now 
use lodash within my own personal project,  

01:29:45.780 --> 01:29:53.400
so I'm just going to hit Ctrl B. And we're going 
to close out our package dot JSON file. And we're  

01:29:53.400 --> 01:29:59.400
going to go to App dot j s and basically what 
we're going to do is require it so I'm just  

01:29:59.400 --> 01:30:10.350
gonna say cool. underscore is equal to require 
lodash. And now from here, let's actually use  

01:30:10.350 --> 01:30:17.910
it to prove that this is working. So I'm just 
going to say underscore dot fill. And fill is  

01:30:17.910 --> 01:30:25.230
basically going to take an array. So I'm just 
going to pass in an array 12345. And the second  

01:30:25.230 --> 01:30:31.140
argument is going to take an A value, what do you 
want to replace these numbers were, so I'm just  

01:30:31.140 --> 01:30:37.170
going to say banana. And the third argument is 
going to be the start index. So what I want to  

01:30:37.170 --> 01:30:45.000
do is start at index one. And the last argument is 
going to be the end index. And since we have five  

01:30:45.000 --> 01:30:53.910
elements within our array, the last index would 
be four. So let's actually store this within a  

01:30:53.910 --> 01:31:02.130
variable. So I'm just going to say let example is 
equal to that. And we're just going to print out  

01:31:02.130 --> 01:31:13.410
this onto the console. So I'm just going to hit 
Ctrl S to save when I go to node. And you'll see  

01:31:13.410 --> 01:31:20.430
that we require lodash into our application. And 
we've tested that one of the methods within lodash  

01:31:20.430 --> 01:31:31.230
is actually working. So we get a new array, and 
we filled in index 123 with the value of banana.  

01:31:31.230 --> 01:31:44.460
And let's say that for whatever instance that you 
installed the wrong module, or you want to get rid  

01:31:44.460 --> 01:31:53.370
of a module, so if I hit control B, and we're just 
going to bring up the package dot JSON file and  

01:31:53.370 --> 01:32:00.750
hit Ctrl V again, what I can do is I can say 
NPM, uninstaller, and then the package name,  

01:32:00.750 --> 01:32:09.000
which is going to be lodash. And you can see 
that lodash is removed from our dependencies.  

01:32:09.000 --> 01:32:16.020
And if I hit Ctrl V, you can see that our node 
underscore modules folder no longer exists.  

01:32:16.020 --> 01:32:21.810
And that's because we have no dependencies 
that our application is using currently.  

01:32:25.770 --> 01:32:31.950
In this tutorial, we're going to be talking about 
semantic versioning. Now, what semantic versioning  

01:32:31.950 --> 01:32:39.150
is, is basically just a standard that a lot of 
Node JS packages follow and allows for us to  

01:32:39.150 --> 01:32:45.570
know what kind of changes have occurred, and the 
updated version of the package. So to get started,  

01:32:45.570 --> 01:32:52.680
you can see that I have my package dot JSON 
file open. And I have a dependency install  

01:32:52.680 --> 01:32:59.070
called lodash. Now within here, you see the 
version of the package that I installed with  

01:32:59.070 --> 01:33:04.530
the carrot sign. And we'll talk about the carrot 
sign within this tutorial as well. But for now,  

01:33:04.530 --> 01:33:11.520
I want you to focus on these three numbers. The 
first number four is going to represent the major  

01:33:11.520 --> 01:33:18.870
version of this package, the second number is 
going to represent the minor version. And the  

01:33:18.870 --> 01:33:25.260
third number is going to represent the patch 
version. Now the major minor and patch numbers  

01:33:25.260 --> 01:33:33.900
all have different meanings. So for example, right 
now, the latest version is four point 17 dot 11.  

01:33:33.900 --> 01:33:41.790
If I wake up tomorrow, and lodash is updated, and 
it says the latest version is four point 17 dot  

01:33:41.790 --> 01:33:49.320
12. That means that that was a patch update. Now 
all I patch update means is that they implemented  

01:33:49.320 --> 01:33:56.970
some bug fixes. Now likewise, same thing happens, 
I go to sleep, they update lodash tomorrow,  

01:33:56.970 --> 01:34:05.400
and instead of four point 17 dot 11 is four point 
18 dot 11. So that means that there was a minor  

01:34:05.400 --> 01:34:13.650
update. Now when a minor update does is it adds 
new functionality. And it might deprecate some of  

01:34:13.650 --> 01:34:21.180
the old functionality, but you could still use it. 
So it's a non breaking change update. And finally,  

01:34:21.180 --> 01:34:28.440
if I was to go to sleep tomorrow and wake up new 
version of lodash is updated. And this time we  

01:34:28.440 --> 01:34:35.910
get version 5.0 dot zero. So what does that mean? 
That means that there was a major update pushed  

01:34:35.910 --> 01:34:42.900
out to lodash. And what a major update indicates 
is that there was a breaking change. So that means  

01:34:42.900 --> 01:34:52.170
version 5.0 dot zero is not compatible with the 
code four point 17 dot 11 or any version of four.  

01:34:52.170 --> 01:35:00.000
So now let's talk about this carrot character. And 
this carrot character was put there automatically  

01:35:00.000 --> 01:35:09.030
When we type NPM, install lodash. Now what this 
carrot character symbolizes the following. So the  

01:35:09.030 --> 01:35:14.850
following rules, if you will. So this means 
that whenever I use the carrot character,  

01:35:14.850 --> 01:35:22.020
that I do not want you to make any major 
updates. So that means right now I'm on  

01:35:22.020 --> 01:35:31.620
version four as the major. But if there is a 
minor update, or a patch update, go ahead and  

01:35:31.620 --> 01:35:39.810
download those new packages. Now, there's another 
symbol called the tada symbol and total symbol is  

01:35:39.810 --> 01:35:46.980
right next to the number one on your keypad. 
And that means that you want the following to  

01:35:46.980 --> 01:35:55.140
occur. That means you only want patch updates. 
So let's say I'm on four point 17. Right now,  

01:35:55.140 --> 01:36:03.180
that means I only want you to change the last 
number. So for example, if for Part 18 comes out,  

01:36:03.180 --> 01:36:11.040
this total symbol will say, hey, do not update 
to that package. And last but not least, let's  

01:36:11.040 --> 01:36:18.030
say that you don't want the tilde or the carrot 
sign up here. So for example, you don't want the  

01:36:18.030 --> 01:36:26.250
carrot sign to update the minor or the patch. And 
you don't want the Tilda to just update the patch,  

01:36:26.250 --> 01:36:33.060
what you can do is remove the carrot or the 
tilde a sign. And this guarantees that the  

01:36:33.060 --> 01:36:40.470
only version of lodash that you will ever have 
within your package will be four point 17 dot 11.  

01:36:44.940 --> 01:36:52.550
In this tutorial, we're going to set up our first 
Express server. Now all Express is is basically  

01:36:52.550 --> 01:37:00.260
a web framework for node j s. So in the previous 
tutorials, we use the HTTP and file system module,  

01:37:00.260 --> 01:37:06.470
in order to serve static files. With Express, 
however, you can see that we can accomplish  

01:37:06.471 --> 01:37:14.271
that and much more with much less code. So to get 
started, I'm just going to go over to Chrome. And  

01:37:14.271 --> 01:37:21.891
here is Express jSs official website. So you 
can see up here that they have guides for you,  

01:37:21.891 --> 01:37:29.661
you could reference the API. And basically, this 
is just the documentation for Express. And you can  

01:37:29.661 --> 01:37:36.170
see that they give install instructions here. Now, 
if you didn't go to the official website, or you  

01:37:36.170 --> 01:37:42.890
didn't know that they had an official website, 
he probably would have went to NPM j s calm,  

01:37:42.891 --> 01:37:49.641
that Express is a publicly available package for 
you to download and install. And you would have  

01:37:49.641 --> 01:37:55.280
just typed Express within the search bar here. 
So I'm just going to head back to Visual Studio  

01:37:55.280 --> 01:38:04.370
code. And the first thing that we need to do is 
actually create our package dot JSON. So I'm just  

01:38:04.371 --> 01:38:12.771
gonna say NPM and net, and I'm going to pass in 
the flag, yes. Now, when you pass in the flag,  

01:38:12.771 --> 01:38:20.661
yes, you basically skip all these configuration 
questions that they ask you when you type NPM. And  

01:38:20.661 --> 01:38:27.800
net. So now that we have our package, JSON, we can 
actually install express itself. So I'm just going  

01:38:27.800 --> 01:38:37.190
to type npm install, express, you can see that 
it's downloading right now. And now from here,  

01:38:37.190 --> 01:38:43.310
let's actually require Express JS into our 
project. So I'm just gonna say const. Express  

01:38:43.311 --> 01:38:52.250
is equal to require Express. Now, when I require 
this module, this Express module, what I'm getting  

01:38:52.250 --> 01:38:59.419
back is a function. So I'm just gonna call that 
function. So I'm just gonna say Express. And this  

01:38:59.419 --> 01:39:05.449
function is going to return an object and this 
object is going to have a bunch of methods that  

01:39:05.450 --> 01:39:12.080
we can use within our application. So let's store 
this object within a variable. And by convention,  

01:39:12.080 --> 01:39:20.000
we will call that variable app. So I'm just going 
to say app is equal to express. Now from here,  

01:39:20.000 --> 01:39:27.410
what I can do is call a method called get. Now the 
first argument of get is going to take the route.  

01:39:27.410 --> 01:39:33.169
So we're just going to say forward slash. And then 
the second argument is going to be the callback  

01:39:33.169 --> 01:39:40.759
function. And it's going to be request and 
response. And then all we're going to do is say  

01:39:40.760 --> 01:39:50.149
res dot send. Hello, world. So this is going to be 
our first application using Express. So when the  

01:39:50.149 --> 01:39:56.239
user visits the route forward slash, what we're 
going to do is Sunday response of hello world  

01:39:56.240 --> 01:40:04.340
and that with a semi colon And then the last step 
that we need to do is actually give it a port to  

01:40:04.340 --> 01:40:12.770
listen to. So I'm just gonna say app dot listen. 
And we're just going to listen on port 3000. So  

01:40:12.770 --> 01:40:23.540
now if I was to save this type no app. And that's 
going to run the server, head over to Chrome. Now,  

01:40:23.540 --> 01:40:32.240
I'm just going to open a new tab. And I'm just 
going to type local host 3000. And there you  

01:40:32.240 --> 01:40:39.229
go. This is our first Express JS application. 
And you can see that we got a response of hello  

01:40:39.229 --> 01:40:46.519
world. And in the upcoming tutorials, we're going 
to dive deeper into the Express web framework.  

01:40:50.600 --> 01:40:56.240
In this tutorial, we're going to work more with 
the HTTP GET requests. And we're going to be  

01:40:56.240 --> 01:41:03.320
talking about Curie string and route parameters. 
So to get started, we created a basic Express  

01:41:03.320 --> 01:41:09.530
application from the previous tutorial. And we 
gave it one route, which is basically the index  

01:41:09.530 --> 01:41:16.580
route, or you could refer to it as the homepage. 
And we just said, Hello world. So if I was just  

01:41:16.580 --> 01:41:28.070
to run this node app, go to Chrome. Go to local 
host. And we're going to put 3000, because that's  

01:41:28.070 --> 01:41:34.850
the port, and you see our basic route. So this 
is the forward slash route. So now let's give  

01:41:34.850 --> 01:41:41.930
it a another route. So I'm just gonna go here, I'm 
just gonna say app get. And we're going to give  

01:41:41.930 --> 01:41:48.800
it another route. And I'm just gonna say example. 
And within here, we're gonna pass in a call back.  

01:41:48.800 --> 01:42:03.230
And now we're just going to say rez, that send 
heading example, route. So now if I save this, I'm  

01:42:03.230 --> 01:42:09.590
just going to hit Ctrl. C to kick us out, we're 
going to restart the server, so that it starts  

01:42:09.590 --> 01:42:18.110
with our newly saved file, head over to Chrome, 
hit refresh, you see that our index page is still  

01:42:18.110 --> 01:42:26.390
working. And if I go here and type example, you 
can see that we create another route, and that  

01:42:26.390 --> 01:42:33.230
it's hitting the example route now, as opposed 
to the index route. So now let's go back here,  

01:42:33.230 --> 01:42:39.590
this is all fine and dandy. Now I want to talk 
about Curie strings and route parameters. So I  

01:42:39.590 --> 01:42:45.080
want to start off with route parameters. And we're 
going to create another route. So I'm just gonna  

01:42:45.080 --> 01:42:55.100
say app dot get. And I'm gonna say example. And 
within here, I'm going to give it these colon, and  

01:42:55.100 --> 01:43:01.700
I'm just gonna say name. And that's going to be 
the name of that route. And I'm just gonna say,  

01:43:01.700 --> 01:43:15.019
ah, and then the same exact thing. So I'm just 
going to pass in a callback, I forget to add.  

01:43:15.020 --> 01:43:23.870
And then this time, what I want to do is access 
from the request object. And I'm just going to say  

01:43:23.870 --> 01:43:30.080
params. And what we want to do is actually print 
this out onto the console. Let's see what we get.  

01:43:30.080 --> 01:43:40.670
And the idea is that I want to get the value of 
name. And ah, so we're just gonna say res dot  

01:43:40.670 --> 01:43:52.400
send. And we're just gonna say hitting, actually, 
let's say example, with route params. So we're  

01:43:52.400 --> 01:44:03.290
just gonna save this, hit Ctrl C, I'm just going 
to say CLS, no app, head over to Chrome. We're  

01:44:03.290 --> 01:44:11.450
going to hit refresh. So our examples working, 
but now, we're going to pass information in so I'm  

01:44:11.450 --> 01:44:18.560
just going to pass in name. So Pedro and an age, 
I'm going to put 99. So I'm going to hit Enter.  

01:44:18.560 --> 01:44:26.720
And you can see example with rope params has been 
executed. So now if I take a look back at Visual  

01:44:26.720 --> 01:44:35.720
Studio code, you can see that when we hit this 
route here, and we print out what's within our  

01:44:35.720 --> 01:44:41.930
request dot params, we get an object. And this 
object contains the properties name and age,  

01:44:41.930 --> 01:44:49.760
and the values of Pedro and 99. So let's give a 
more detailed example. Instead of just giving a  

01:44:49.760 --> 01:45:01.520
generic answer. I'm just gonna print send the 
user back his name. So I say name plus Here,  

01:45:01.520 --> 01:45:11.630
I'm just going to say ah, and don't forget that 
this name, property and age is within our requests  

01:45:11.630 --> 01:45:21.320
that params. And all request dot params is, is an 
object. So I could say request dot params dot name  

01:45:21.320 --> 01:45:29.630
to access the name value. And I could say request 
dot params dot age to access the age property.  

01:45:29.630 --> 01:45:38.300
So now if I save this, and we're going to reset 
the server, CLS to clear the terminal node app,  

01:45:38.300 --> 01:45:48.590
head over to Chrome, hit refresh. And you can 
see that we're sending back to the user Pedro in  

01:45:48.590 --> 01:45:56.630
99. And that we get the same output because we're 
still printing it. So that's how we would get data  

01:45:56.630 --> 01:46:04.430
from the user using route parameters. But there's 
also another type of data that you could send  

01:46:04.430 --> 01:46:11.480
back. And that's called Curie string parameters. 
So what is that? Well, if I go back here,  

01:46:11.480 --> 01:46:17.690
and actually, let me just type this up, I'm going 
to say console dot log. And again, we're going to  

01:46:17.690 --> 01:46:24.500
use the request object because the request object 
is basically what the client is sending us. So I'm  

01:46:24.500 --> 01:46:34.670
just gonna say, request that Curie. And here in 
Google Chrome, let's actually cancel this server.  

01:46:34.670 --> 01:46:46.400
I'm going to save this file, restart the server, 
head over to Chrome. Just going to go up here,  

01:46:46.400 --> 01:46:56.330
hit refresh. Go back to Visual Studio code. And 
you can see that we get an empty object. Now this  

01:46:56.330 --> 01:47:02.270
empty object is going to be our request, Curie. 
So it's just a Curie string parameter. And the  

01:47:02.270 --> 01:47:08.420
reason it's an empty object is because we haven't 
actually passed anything into it. So in order to  

01:47:08.420 --> 01:47:16.280
do that, there's going to go up here, we're going 
to use a question mark. And then it's going to be  

01:47:16.280 --> 01:47:21.660
the name of the property that you want. So 
I'm just going to make it up right now. I'm  

01:47:21.660 --> 01:47:29.280
going to give it a name of tutorial, and then 
followed by an equal sign, and then the value  

01:47:29.280 --> 01:47:39.990
you want to assign it. So I'm just going to say 
params. tutorial. And now if I hit Enter Here, you  

01:47:39.990 --> 01:47:47.520
can see that's pretty much the same thing that's 
happening. But if I go back to Visual Studio code,  

01:47:47.520 --> 01:47:57.120
you can see that our request, Curie object is 
no longer empty. We have a property of tutorial,  

01:47:57.120 --> 01:48:04.620
and we have params tutorial as a value. So now 
let's say that I want to pass more than just  

01:48:04.620 --> 01:48:11.550
the tutorial. So how would I pass multiple query 
string parameters. And if we head back to Chrome,  

01:48:11.550 --> 01:48:18.300
all we have to do is remember to start off with 
a question mark, the name of the query string,  

01:48:18.300 --> 01:48:25.200
and then the value. So if you want to pass in a 
second, curious string, what you can do is use  

01:48:25.200 --> 01:48:31.110
the Add sign or the app or stamp, whatever you 
want to call it. And I'm just going to give it  

01:48:31.110 --> 01:48:41.760
sort. And then I'm just going to say equal. And 
I'm going to give it the value of by age. And if  

01:48:41.760 --> 01:48:50.430
I hit Enter, head over to Visual Studio code. And 
you can see now that when we print out our Curie  

01:48:50.430 --> 01:48:56.940
string, you can see that we get an object that 
has tutorial. And it also has the property of  

01:48:56.940 --> 01:49:04.500
sort. So now you might be asking yourself, when 
should I use a route parameter versus a query  

01:49:04.500 --> 01:49:11.820
string parameter, you should use route parameters 
when you must have that data. So for example,  

01:49:11.820 --> 01:49:20.340
let's say name was an absolute must, I cannot have 
a blank name. And I cannot have a blank age. So I  

01:49:20.340 --> 01:49:26.640
would use a route parameter. And let's say that I 
want to give some optional settings. In that case,  

01:49:26.640 --> 01:49:32.250
I would use a query string parameter. 
So for example, when we pass then sort,  

01:49:32.750 --> 01:49:37.790
we could be sorting the data by age, 
and that would be an optional setting,  

01:49:37.790 --> 01:49:44.090
but I would need the name and the age to begin 
with, so I would use a route parameter for that.  

01:49:44.090 --> 01:49:50.300
And if the user wants to sort the data, then 
I will use a query string parameter for that.  

01:49:55.020 --> 01:50:00.581
In this tutorial, we're going to be talking 
about serving static files using Express Now  

01:50:00.581 --> 01:50:08.980
what do I mean by a static file, I mean, your 
HTML files, CSS, client side JavaScript, images,  

01:50:08.980 --> 01:50:14.920
videos, stuff like that. So to get started, 
we're just going to require a path module,  

01:50:14.920 --> 01:50:21.490
and is basically a utility module that deals 
with pass, just to make our lives a little bit  

01:50:21.490 --> 01:50:30.610
easier. And we're finished here, if I go 
down here, I can say app not use now use,  

01:50:30.610 --> 01:50:39.340
whenever you see app use, it means that I'm using 
middleware, the first argument is going to be the  

01:50:39.340 --> 01:50:48.010
alias for our static folder. So for example, if 
I was to hit control B, you can see that I have  

01:50:48.010 --> 01:50:54.760
a static folder here. And what I want to do is 
give this static folder, an alias, I don't want  

01:50:54.760 --> 01:51:02.320
people outside of my server to know that this 
folder is called static. But let's take a look  

01:51:02.320 --> 01:51:11.680
inside of it. We have an index dot HTML, we have 
example that j s. And we have a main dot CSS file,  

01:51:11.680 --> 01:51:21.520
just for an example. So now if I close that Ctrl 
B, I'm going to call it public. That's going to  

01:51:21.521 --> 01:51:28.300
be the alias for my static folder. The second 
argument is going to be a middleware function.  

01:51:28.300 --> 01:51:36.400
So I'm going to use a convenient method that 
express provides us so I could say Express dot  

01:51:36.400 --> 01:51:49.440
static. And then I'm going to say path dot join. 
Say dirname. R stands for directory name. Now,  

01:51:49.440 --> 01:51:58.500
dur name is a string. And this is going to give 
us where app that j s is. So if we take a look,  

01:51:58.500 --> 01:52:07.110
by pressing Control B, is going to give us where 
app dot j s is located. Now I want to go inside  

01:52:07.110 --> 01:52:14.130
to the static folder, because this is where all my 
static assets are. So if I hit Control V, again,  

01:52:14.130 --> 01:52:22.110
we'll pass in as a second argument, the name 
of the folder static. So I'm just going to end  

01:52:22.110 --> 01:52:32.250
this call in there says there's some error, 
and I'm missing a parentheses. So now here,  

01:52:32.250 --> 01:52:39.000
instead of just saying hello world, let's actually 
send a file. So I'm just going to remove this,  

01:52:39.000 --> 01:52:48.660
say res dot send a file. And we're going to use 
our path module. Again, to make things easier.  

01:52:48.660 --> 01:52:54.840
I'm going to say path dot join, we're going to 
give it the directory name that we're currently  

01:52:54.840 --> 01:53:03.690
in. We're going to go inside the static folder. 
And then I want to serve the HTML file. So the  

01:53:03.690 --> 01:53:16.770
HTML file is called index dot HTML. So now, if 
I was to save this, go down here, type node app.  

01:53:16.770 --> 01:53:26.820
Let's go over to Chrome. Now we're going to go 
up here, type localhost 3000. And there you go,  

01:53:26.820 --> 01:53:34.620
you can see our static HTML file has been served. 
If I type f 12. Let's take a look at the source  

01:53:34.620 --> 01:53:45.240
real quick. I can actually see it. And you can 
see within our HTML file that we're using public.  

01:53:45.240 --> 01:53:50.880
Now remember, we don't actually have a folder 
called public, we have a folder called static,  

01:53:50.880 --> 01:54:00.360
but to the client side is called public. And this 
main dot CSS file. Now this main dot CSS file is  

01:54:00.360 --> 01:54:08.910
working, because you can see that our h1 tag is 
red. And now if we go back down here, you can  

01:54:08.910 --> 01:54:19.140
see public j s and our example dot j s. And if 
I go to console, you can see that I printed out  

01:54:19.140 --> 01:54:26.970
onto the console testing client side. So that's 
basically the basics of serving static files  

01:54:26.970 --> 01:54:35.160
using Express. Now you can use this to use images 
and videos, and it'll be the same exact process.  

01:54:39.120 --> 01:54:46.950
In this tutorial, we're going to be talking about 
handling an HTTP POST request using Express. Now  

01:54:46.950 --> 01:54:54.510
an HTTP POST request is typically used when 
working with forms. So I have my form set up  

01:54:54.510 --> 01:55:01.080
right here. I have an email address field and 
a password field and if I was the hit submit,  

01:55:01.080 --> 01:55:09.060
that would be an example of a POST request. Now, 
obviously, we're getting an error from node cannot  

01:55:09.060 --> 01:55:16.440
post to this route. And that's because we haven't 
actually coded anything yet. So if we take a look  

01:55:16.440 --> 01:55:24.870
at Visual Studio code, you can see our form that I 
set up, action is going to be the route that we're  

01:55:24.870 --> 01:55:33.990
going to code. So I just put forward slash, the 
HTTP method is going to be a POST method. Here,  

01:55:33.990 --> 01:55:42.150
we see that we have our email field, and our 
password field, and our button of type Submit.  

01:55:42.150 --> 01:55:48.750
So now I'm just going to head over to App j, 
s. And I actually want to code the app dot POST  

01:55:48.750 --> 01:55:55.380
method. So if we take a look at our application of 
this, it's currently All I have is an app dot get.  

01:55:55.380 --> 01:56:04.200
This is the route and I want doing is serving the 
HTML file to the user. So in order to remedy this,  

01:56:04.200 --> 01:56:12.390
we're going to use a module that's going to parse 
the form data for us. And that module is called  

01:56:12.390 --> 01:56:19.530
the body parser module. And that module is called 
the body parser module. So to get started, we're  

01:56:19.530 --> 01:56:24.930
actually going to have to install this module. 
So I'm just going to come down here, cancel our  

01:56:24.930 --> 01:56:35.190
server, I'm going to say NPM, install body parser. 
So let that install. And now from here, what we're  

01:56:35.190 --> 01:56:42.870
going to do is require it into our application. 
So I'm just going to say Kant's. Body parser is  

01:56:42.870 --> 01:56:54.360
equal to require body parser. And now from here, 
what we're going to do is use middleware. So every  

01:56:54.360 --> 01:57:02.580
time we use middleware, we're going to call app 
dot use. So here, I'm just gonna say app dot use,  

01:57:02.580 --> 01:57:11.460
then I'm gonna say body parser dot URL encoded. 
And then within here, we're gonna pass in an  

01:57:11.460 --> 01:57:19.230
option called extended. And we're gonna set that 
to false. So and that was the semi colon. And all  

01:57:19.230 --> 01:57:26.970
this is doing is allowing us to parse URL encoded 
forms, it parses the data for us and attaches  

01:57:26.970 --> 01:57:32.760
it to the request body, the extended option is 
set to false because we aren't dealing with any  

01:57:32.760 --> 01:57:40.290
complicated objects. All we want is an email and 
password, which are both strings. So now that we  

01:57:40.290 --> 01:57:48.540
have that set up, let's actually code or app that 
post HTTP requests. So we have our get here. And  

01:57:48.540 --> 01:57:54.690
now I'm just going to go down here. And instead of 
saying app dot get, I'm going to say app dot post,  

01:57:54.690 --> 01:58:01.380
the first argument is going to be the route. 
And as you saw on the HTML file, the action  

01:58:01.380 --> 01:58:09.420
route is the forward slash. The second argument is 
going to be a callback function with the request  

01:58:09.420 --> 01:58:19.620
and rez object. And now from here, remember what 
the body parser does, it parses the data for us,  

01:58:19.620 --> 01:58:26.700
and then attaches it to the body of the request 
object. So now what I can do here is I could say  

01:58:26.700 --> 01:58:35.670
console dot log request dot body. And this is 
going to give us an object with the properties  

01:58:35.670 --> 01:58:44.910
of email and password. And now from here, usually, 
when you post something to the server, you usually  

01:58:44.910 --> 01:58:51.150
use whatever the user inputted, and you do some 
database work. So I'm just gonna say database  

01:58:51.150 --> 01:58:59.370
work, here. And once that database work is done, 
you assign a response or user. So I'm just gonna  

01:58:59.370 --> 01:59:09.120
say res dot send successfully, post that data. 
Now, I'm just going to hit Ctrl S to save,  

01:59:09.120 --> 01:59:16.500
go down here, I'm going to type in Node app, 
start up my server. Let's head over to Chrome.  

01:59:16.500 --> 01:59:26.280
And now if I hit refresh, just to reload it, 
let's type some random email. Random password,  

01:59:26.280 --> 01:59:36.390
hit submit. So now what happened here was I filled 
in my email and password I posted to the server,  

01:59:36.390 --> 01:59:43.260
I got a response back from the server saying 
everything was posted successfully. So if I go  

01:59:43.260 --> 01:59:49.650
back to Visual Studio code, you can see that our 
console dot log is working. We're printing out  

01:59:49.650 --> 01:59:55.950
the request dot body, and you can see that our 
form data has been successfully parsed. So if we  

01:59:55.950 --> 02:00:00.840
take a look down here on to the console, you'll 
see that we have an object With the property,  

02:00:00.840 --> 02:00:08.010
email and its value, and you also have property 
of password and its value. So that's pretty much  

02:00:08.010 --> 02:00:16.380
how you would make an HTTP POST request 
using Express and the body parser module.  

02:00:20.270 --> 02:00:26.590
In this tutorial, we're going to be talking about 
how we can handle JSON data using Express and the  

02:00:26.590 --> 02:00:32.350
body parser module. So in the previous tutorial, 
we talked about using the body parser module,  

02:00:32.350 --> 02:00:39.160
in order to handle URL encoded data. So what 
we're going to do is take this form from the last  

02:00:39.160 --> 02:00:46.090
tutorial, and convert it to post JSON data. So to 
get started, I'm just going to head over to Visual  

02:00:46.090 --> 02:00:53.020
Studio code. And right here, I have my 
index dot HTML file and our form pulled up,  

02:00:53.020 --> 02:00:57.550
what I'm going to do is add an attribute to 
the forum. So I'm just going to give it an ID,  

02:00:57.550 --> 02:01:04.330
and I'm going to call it form. And the reason for 
that is I want to prevent the default submission,  

02:01:04.330 --> 02:01:11.950
I want to post data using jQuery Ajax. So that's 
how we're going to post JSON data to our server.  

02:01:11.950 --> 02:01:21.130
So now that I have my ID, scroll down, and I 
already put our jQuery CDN here, just to make  

02:01:21.130 --> 02:01:26.770
the tutorial a little bit quicker. And we're just 
going to go here, and we're going to include our  

02:01:26.770 --> 02:01:35.800
script. So I'm just gonna say script. Now from 
here, we're just gonna say document dot ready.  

02:01:35.800 --> 02:01:48.970
And the first thing that we want to do is get 
our form. So I'm just say dollar sign, pound  

02:01:48.970 --> 02:01:58.330
sign form. And we're going to attach a submit 
handler to our form. And this submit handler is  

02:01:58.330 --> 02:02:07.870
going to take a callback function, which has an 
event as a parameter. So now, what I want to do  

02:02:07.870 --> 02:02:13.480
is prevent the default Submit. So we're just going 
to take the event that we get, and we're going to  

02:02:13.480 --> 02:02:21.700
call prevent default. And from here, we're going 
to use Ajax to actually make the POST requests.  

02:02:21.700 --> 02:02:28.450
And what we're going to do is post JSON data 
back to the server. So I'm just going to say,  

02:02:29.140 --> 02:02:37.660
dollar sign, Ajax. And this is going to take a 
bunch of configuration. So one of the properties  

02:02:37.660 --> 02:02:43.480
that we can use is called URL, and this is going 
to be the endpoint that we're gonna have at our  

02:02:43.480 --> 02:02:50.830
server. So I'm just going to say forward slash, 
second property is going to be type. And this is  

02:02:50.830 --> 02:02:57.010
going to be what kind of HTTP requests that we 
want to make. And we're gonna post JSON to the  

02:02:57.010 --> 02:03:04.570
server. So I'm just gonna say post. third argument 
is going to be the content type. And the content  

02:03:04.570 --> 02:03:14.380
type is obviously going to be JSON. So I'm just 
gonna say application, slash JSON. Next property  

02:03:14.380 --> 02:03:19.750
that we're going to use is called data. And this 
is going to be the actual form data that we want  

02:03:19.750 --> 02:03:30.520
to pass in. So how do we get the form data? Well, 
I'm just going to say, get our form. And then I'm  

02:03:30.520 --> 02:03:37.690
going to serialize it using the serialize array. 
And basically, this is going to take our form  

02:03:37.690 --> 02:03:45.910
data, so our email field and our password field 
serialize it within an array. And this is going to  

02:03:45.910 --> 02:03:53.380
be a JavaScript array object. But remember, we're 
posting JSON back to the server, because that's  

02:03:53.380 --> 02:04:02.680
the content type that we want. So we're just going 
to say JSON that string of phi and pass in this  

02:04:02.680 --> 02:04:08.950
data as an argument. So this is going to take 
the serialized array, and it's going to convert  

02:04:08.950 --> 02:04:17.830
it into JSON for us. Next, we're going to say 
success. And success is going to be invoked when  

02:04:17.830 --> 02:04:26.110
we have successful response back from the server. 
So I'm just going to say response. And we're just  

02:04:26.110 --> 02:04:34.000
going to print onto the console successfully. 
Got response. And we're also going to print out  

02:04:34.000 --> 02:04:39.910
the response that we actually got from the server. 
So once all this is done, let's scroll down a bit.  

02:04:39.910 --> 02:04:48.460
Everything looks good to me. So I'm just going to 
save our index dot HTML file. We're going to head  

02:04:48.460 --> 02:04:55.360
back to app.js. So this is our server. And 
down here, remember that we told our Express  

02:04:55.360 --> 02:05:04.570
application how to handle URL encoded data Now 
what we need to do is just say app dot use body  

02:05:04.570 --> 02:05:12.880
parser. And this has a method called JSON. Now 
this method is obviously going to parse JSON. And  

02:05:12.880 --> 02:05:21.220
it's going to attach it to our request dot body. 
So now if I just put a semicolon there, and when  

02:05:21.220 --> 02:05:28.270
we scroll back down, you can see our original post 
request is handled here. And what I'm going to do  

02:05:28.270 --> 02:05:35.290
is, instead of saying just plain text, we're gonna 
respond back to the client using JSON. So I'm just  

02:05:35.290 --> 02:05:42.610
going to say, res dot JSON. And we're going to 
pass an object. And we're just going to say that  

02:05:42.610 --> 02:05:49.360
it's been successfully posted. So now obviously, 
what res dot Jason does is takes a JavaScript  

02:05:49.360 --> 02:05:55.840
object and converts it into JSON for us. So now 
if I was to save this, and I'm just going to go  

02:05:55.840 --> 02:06:04.450
to terminal new terminal, and I'm going to say 
node app to run the server, go back to Chrome,  

02:06:04.450 --> 02:06:14.620
when I type localhost. And now to test this 
out, let's give it a dummy email and password,  

02:06:14.620 --> 02:06:25.390
click Submit. And now if I hit F 12, you can see 
form serial array is not a function. So let's take  

02:06:25.390 --> 02:06:32.709
a look at this. And we're getting an error. Let's 
actually take a look at that part of the code. And  

02:06:32.709 --> 02:06:42.159
that's because we did not include the dollar sign. 
So let's include that now. Let's save it. Go over  

02:06:42.160 --> 02:06:54.850
to Chrome. Now we're going to hit refresh. And 
type whatever we want. hit submit, go to console  

02:06:54.850 --> 02:07:03.190
and see that we successfully host that JSON to the 
server. A server responded by posting this object  

02:07:03.190 --> 02:07:11.590
back to us. If I go back to Visual Studio code, 
you can see that we have our serialized form data,  

02:07:11.590 --> 02:07:24.730
you can see that we have our serialized form 
data. And that it's not JSON, that this is just an  

02:07:24.730 --> 02:07:31.930
array. And the reason why you're not getting back 
JSON. And it's because our body parser module sees  

02:07:31.930 --> 02:07:38.680
that it's JSON and automatically converts it to 
a JavaScript object. In this case, it's an array.  

02:07:43.560 --> 02:07:49.050
In this tutorial, we're going to be talking about 
validating user input using joy. So what we're  

02:07:49.050 --> 02:07:54.510
going to do is validate the data coming in from 
this form. Now, the reason you would validate user  

02:07:54.510 --> 02:08:01.140
input server side is because you can never trust 
the data that you're receiving from the user. So  

02:08:01.140 --> 02:08:07.500
to get started, let's actually head over to Visual 
Studio code. And I'm just going to cancel out our  

02:08:07.500 --> 02:08:15.810
server. And I'm going to type NPM, install joy. 
And this is going to install the joy module. Now  

02:08:15.810 --> 02:08:20.130
from here, what we're going to do is actually 
require it into our application. So I'm going  

02:08:20.130 --> 02:08:29.910
to go up here, I'm going to type const, Joy is 
equal to require joy. So now that we have joy  

02:08:29.910 --> 02:08:35.700
in our application, let's actually go down to 
our request. So we have our GET request, which  

02:08:35.700 --> 02:08:41.880
basically serves the form to our user. And we have 
our post request, which is going to get the data  

02:08:41.880 --> 02:08:48.810
from our user. So from here, what we want to do 
is actually validate the data that we get within  

02:08:48.810 --> 02:08:56.700
our request body. And in order to do that, what 
we're going to do is create a schema. So what's  

02:08:56.700 --> 02:09:03.990
a schema, a schema is basically a blueprint, 
a set of rules that we want our data to have.  

02:09:03.990 --> 02:09:10.560
So we have an email field, and we have a password 
field. So what I want to do is make sure that the  

02:09:10.560 --> 02:09:17.850
email that the user gives me as a valid email, and 
likewise with the password field. So what we can  

02:09:17.850 --> 02:09:26.040
do here is I can come down here, and we can create 
a schema. Now remember, this is just a blueprint,  

02:09:26.041 --> 02:09:35.850
I'm going to say joy dot object. Now this is going 
to give us a joy object. Next thing we need to do  

02:09:35.850 --> 02:09:43.110
is call a method called keys. Now keys is going to 
work the same way that a regular JavaScript file  

02:09:43.110 --> 02:09:50.310
would work. You will have your key value pairs, 
and we're going to pass in the options. Now within  

02:09:50.310 --> 02:09:58.480
here, what we want to do is set the rules that the 
data that we're receiving must follow. So we have  

02:09:58.480 --> 02:10:06.580
a field called email. And within here, I'm gonna 
say joy, I'm going to say string. So what I'm  

02:10:06.580 --> 02:10:15.730
saying is, the email field must be a string value, 
I'm going to trim that data that I'm receiving,  

02:10:15.730 --> 02:10:23.830
I'm going to call a method called email. This is 
going to check to see whether or not this is a  

02:10:23.830 --> 02:10:32.500
valid email. And I'm going to call one more method 
called required. Now required does is if the user  

02:10:32.500 --> 02:10:38.980
sends me a no email, in other words, the user 
doesn't fill out an email, I'm going to get an  

02:10:38.980 --> 02:10:45.760
error because this field is required. So let's 
go back to our another property. And the next  

02:10:45.760 --> 02:10:53.500
property we have is password. So from here, I'm 
going to do the same thing, joy, I need it to be  

02:10:53.500 --> 02:11:01.420
of type string. And let's change it up for the 
password field. So let's say that I need the  

02:11:01.420 --> 02:11:08.680
password to be at least five characters. So I'm 
going to call the min method and pass in five,  

02:11:08.680 --> 02:11:17.320
I'm going to call the max method. And I'm going to 
pass in 10. So right now, this password must be a  

02:11:17.320 --> 02:11:23.680
minimum of five characters long, and a maximum 
of 10 characters. So between five and 10. And  

02:11:23.680 --> 02:11:29.950
the last method I'm going to call is required. 
And now let's end this with a semicolon. So now  

02:11:29.950 --> 02:11:34.540
that we have our blueprint, let's actually 
use it. So we're going to call a method  

02:11:34.540 --> 02:11:42.010
called validate. So I'm just going to say joy dot 
validate. And it's going to take three arguments,  

02:11:42.010 --> 02:11:47.890
the first argument is the object that you want to 
validate. In this case, remember, we use the body  

02:11:47.890 --> 02:11:55.780
parser to parse the form data and attach it to the 
body of the request object. So this is going to be  

02:11:55.780 --> 02:12:02.140
our first argument. The second argument is going 
to be our blueprint, which we just created, it's  

02:12:02.140 --> 02:12:09.230
called schema. And our third argument is going to 
be the callback function, that's going to take two  

02:12:09.230 --> 02:12:17.390
parameters. First one is going to be error, second 
one is going to be result. And what we can do is  

02:12:17.390 --> 02:12:24.440
find out our result. So if I say if error, this is 
going to execute true, if there's something wrong  

02:12:24.440 --> 02:12:32.000
with the data, so error is not know then this 
code will be executed. So if error is executed,  

02:12:32.000 --> 02:12:45.350
we know something went wrong. So I'm just gonna 
say res dot send, an error has occurred. But if  

02:12:45.350 --> 02:12:55.400
there is no error, what we can do is we could just 
say res dot send. And I can say, successfully,  

02:12:55.400 --> 02:13:04.550
post that data. Now just for the sake of this 
tutorial, I'm going to print out result, just so  

02:13:04.550 --> 02:13:10.070
you can see what the result is. Now, the result is 
basically just going to be the data that we passed  

02:13:10.070 --> 02:13:15.920
in. So it's just going to be the request body. And 
I'm going to go up here, and I'm going to print  

02:13:15.920 --> 02:13:24.380
out the error object. So now that I have these 
two out, what we can do is get rid of our old  

02:13:24.380 --> 02:13:34.310
code from the last tutorial. I'm actually going to 
save this, we're going to type in Node app. Let's  

02:13:37.200 --> 02:13:44.550
head over to Chrome. And from here, I'm just going 
to type in, actually, let's just refresh the page  

02:13:44.550 --> 02:13:52.710
real quick. Let's type in an email. And let's 
type in a password. And then if I hit submit,  

02:13:52.710 --> 02:14:00.810
you can see successfully posted data. So if I go 
back to Visual Studio code, you can see that our  

02:14:00.810 --> 02:14:06.960
email is right here. And it probably hit Submit 
twice because I probably clicked it twice. And  

02:14:06.960 --> 02:14:13.290
you can see that our result that's getting printed 
out is just the request that body is whatever the  

02:14:13.290 --> 02:14:20.190
user posted. And you would do all your database 
manipulation and calls here. So now let's actually  

02:14:20.190 --> 02:14:28.800
go back to Chrome. And this time, we're going to 
type localhost again. And stead of giving valid  

02:14:28.800 --> 02:14:34.500
data. Let's see what happens when we post invalid 
data. So I'm going to post valid data for email.  

02:14:34.500 --> 02:14:41.070
And for the password. Remember, we have to give 
it between five and 10 characters long. So I'm  

02:14:41.070 --> 02:14:46.140
just going to give it two characters long and 
let's see what happens. I'm going to hit submit.  

02:14:46.140 --> 02:14:52.980
And you can see the response we get an error has 
occurred. So let's actually take a look at this  

02:14:52.980 --> 02:15:00.870
in Visual Studio code. You can see this big long 
mess of mumbo jumbo So I'm just going to go back  

02:15:00.870 --> 02:15:11.000
up. And you can see the error that we're getting. 
It says validation error child password fails,  

02:15:11.000 --> 02:15:17.000
because password must be at least five 
characters long. So you can see our validation  

02:15:17.000 --> 02:15:23.270
is working. And this is pretty much the ins 
and outs of validating user input using joy.  

02:15:27.280 --> 02:15:32.080
This is going to be part two of my joy 
validation tutorial. So in this tutorial,  

02:15:32.080 --> 02:15:37.630
we're going to be covering how we can validate 
a nested object, as well as how we can validate  

02:15:37.630 --> 02:15:43.690
an array. So to get started, I pretty much 
stripped out all the Express stuff. And we're  

02:15:43.690 --> 02:15:50.560
going to simulate a user's requests. So for this 
example, we have this user input, and it has a  

02:15:50.560 --> 02:15:56.770
nested object. And it has a property of personal 
info with the properties of street address, city  

02:15:56.770 --> 02:16:03.340
and state. And we have preferences, which is going 
to be our array, and you can see what values their  

02:16:03.340 --> 02:16:08.470
array contains here. So the first values that 
we're going to start off with are string values,  

02:16:08.470 --> 02:16:13.750
and then we're going to move on to objects. So 
the way that I'm going to tackle this problem is,  

02:16:13.750 --> 02:16:20.710
I'm going to look at our user input, and I'm going 
to break it down into sections. So for example,  

02:16:20.710 --> 02:16:26.650
I'm going to develop a schema for personal 
info, and then I'm going to develop a schema  

02:16:26.650 --> 02:16:33.310
for preferences. So to get started, we're going 
to develop the personal info schema, first, I'm  

02:16:33.310 --> 02:16:41.320
just going to copy this, I'm going to come down 
here. Now I'm gonna say Kant's, personal info,  

02:16:41.320 --> 02:16:48.070
and then I'm just gonna add schema. Next, I'm 
going to create a joy object schema. So I'm just  

02:16:48.070 --> 02:16:58.389
gonna say joy dot object. Keys, we're gonna hit 
enter a semi colon down here, we're going to go  

02:16:58.390 --> 02:17:04.630
up copy street address, would just develop a 
schema like we normally would. So I'm just gonna  

02:17:04.630 --> 02:17:14.320
paste that street address is going to be joy dot 
string, dot trim, I'm going to make this required,  

02:17:14.320 --> 02:17:22.059
we're going to do the same thing with the other 
properties, go to city, copy this, go down here,  

02:17:22.060 --> 02:17:31.870
paste, and street address and city, we're going to 
make the same exact thing. And last but not least,  

02:17:31.870 --> 02:17:39.700
we're going to take the state. And it's going to 
be the same exact joy schema, except that we're  

02:17:39.700 --> 02:17:46.330
going to add that it has to be of length of two. 
So I'm just going to copy this, paste this here.  

02:17:46.330 --> 02:17:55.750
And we're going to use the dot length method 
and set that to two. So we're going for state  

02:17:55.750 --> 02:18:03.430
abbreviations. So now that we have our personal 
info schema out of the way, let's develop a schema  

02:18:03.430 --> 02:18:09.940
for preferences. So I'm going to copy this, we're 
going to go down here, I'm going to say Kant's,  

02:18:09.940 --> 02:18:19.599
preferences, schema. And this time, instead of 
using joy dot object dot keys, we're going to say  

02:18:19.600 --> 02:18:27.400
joy dot array. And this is going to give us an 
array schema. And we're going to use a helper  

02:18:27.400 --> 02:18:36.280
method called items. Now what items is going to 
take in as an argument is basically any schema you  

02:18:36.280 --> 02:18:42.130
want. In this case, what we want is an array of 
strings. So I'm just going to pass in the schema,  

02:18:42.130 --> 02:18:49.271
Joy dot string. So this is going to make sure 
that all the items that within their array are  

02:18:49.271 --> 02:18:55.960
off strings. Last but not least, let's actually 
combine these two to form one schema, I'm gonna  

02:18:55.960 --> 02:19:09.910
say Kant's schema. And I'm gonna say joy dot 
object, dot keys, pass in this object. And this  

02:19:09.910 --> 02:19:16.930
time, we're going to say personal info. And that's 
going to be equal to the schema we just created up  

02:19:16.930 --> 02:19:24.910
here. So we have our personal info schema. So I'm 
just going to copy this, paste this here. And now  

02:19:24.910 --> 02:19:41.349
if I go back to my array, we call it preferences. 
Copy that has this here. Preferences schema. Next,  

02:19:41.350 --> 02:19:46.960
let's actually call this so I'm going to go 
down here, I'm going to say joy that validate  

02:19:46.960 --> 02:19:54.910
the first argument is going to be the same as last 
tutorials. So we're just going to say user input.  

02:19:54.910 --> 02:20:00.670
second argument is the schema. So we're going 
to use the built in schema Now that we made,  

02:20:00.670 --> 02:20:08.710
which consists of the two different schemas 
that we created separately, last argument is  

02:20:08.710 --> 02:20:16.030
going to be the callback function. So I'll just 
say error result. I'm going to say if error,  

02:20:16.030 --> 02:20:26.590
we're just going to print out what the error is. 
Else, just print out the result. And the result is  

02:20:26.590 --> 02:20:33.190
just going to be the user input. So I'm just gonna 
save this, let's actually add a semicolon here,  

02:20:33.190 --> 02:20:42.549
save this, we're gonna type in Node app. And you 
can see that our data is validating. So the basic  

02:20:42.550 --> 02:20:49.810
premise is, if you're given a complicated 
object, break them up into their individual  

02:20:49.810 --> 02:20:56.290
schemas. And then you could combine them like 
so. Now I want to talk about, let's say that I  

02:20:56.290 --> 02:21:02.350
want an array of objects as opposed to an array 
of strings. So we're just going to go up here,  

02:21:02.350 --> 02:21:08.590
we're going to change preferences to reference 
array of objects. And then we have an example  

02:21:08.590 --> 02:21:16.150
object here. So this is a very simplistic example, 
we just have a property of code example. And it  

02:21:16.150 --> 02:21:22.120
has the value of a string. So example, one, two, 
and three. So we're just going to change this  

02:21:22.120 --> 02:21:29.830
through an array of objects. Let's go down here. 
And instead of specifying joy dot string here,  

02:21:29.830 --> 02:21:41.530
because we're not looking for strings anymore. 
We can say joy dot object, that keys and then  

02:21:41.530 --> 02:21:47.679
we just build our schema, like we did before. 
So in this case, we only have one property,  

02:21:47.680 --> 02:21:53.229
it's called example. And we're gonna 
give it the value of joy dot string,  

02:21:53.229 --> 02:22:04.870
dot required. So this was a very simplistic 
example, if you had a more complicated object,  

02:22:04.870 --> 02:22:11.920
you would do the same thing like we've been doing. 
So I'm just going to save this. And let's actually  

02:22:11.920 --> 02:22:19.960
execute this code, see if it's working node app. 
And you can see that it validates, and we didn't  

02:22:19.960 --> 02:22:27.550
get any errors. So that's basically how you can 
develop a schema for nested object, and how we  

02:22:27.550 --> 02:22:33.550
can develop schemas for arrays, and even create 
our own custom schema objects for those arrays.  

02:22:37.351 --> 02:22:44.229
In this tutorial, we're going to be talking about 
e j, s. Now what ej S is is a template language.  

02:22:44.229 --> 02:22:51.669
And that's going to allow us to write more dynamic 
web pages. So to get started, what we have here is  

02:22:51.670 --> 02:22:59.890
a static HTML file, you can see that we have dummy 
data here. So when it says you searched for stuff,  

02:22:59.890 --> 02:23:07.359
and we have search results of dummy data, now 
what we want to do is use this HTML file as  

02:23:07.359 --> 02:23:15.040
a template that we can use for serving dynamic 
data. So one way to do that is if we go back to  

02:23:15.040 --> 02:23:22.300
Visual Studio code, we can set the view of our 
Express application. And in order to do that,  

02:23:22.300 --> 02:23:29.560
we would go here, and we could say, app 
dot set is going to take into arguments,  

02:23:29.560 --> 02:23:35.920
we're going to specify the view engine, a second 
argument is going to be the template that you  

02:23:35.920 --> 02:23:41.890
want to use. So we're just going to say e 
j, s. Once we set the view engine to ej s,  

02:23:41.890 --> 02:23:50.050
we're going to have to hit Ctrl B. And we're going 
to have to create a folder called views. And this  

02:23:50.050 --> 02:23:56.020
is going to store our E j s templates. So I'm just 
going to go down here, right click New Folder,  

02:23:56.020 --> 02:24:03.790
and we're gonna call this views. Now Express is 
going to automatically know that our templates  

02:24:03.790 --> 02:24:09.670
are located in the views folder, because that's 
the default folder that looks for. So now if I  

02:24:09.670 --> 02:24:18.160
create my views folder, if I right click new file, 
and instead of saying index dot HTML, I specify  

02:24:18.160 --> 02:24:25.960
index dot e j s. So now that I have my index.js 
file, I'm just going to go to my index dot HTML.  

02:24:25.960 --> 02:24:35.410
I'm going to copy all this. And I'm just going to 
paste the code within my index dot e j s. So now  

02:24:35.410 --> 02:24:42.160
I'm just going to save this. I'm going to go to 
App dot j s. And what we do with templates is that  

02:24:42.160 --> 02:24:47.380
we've rendered on to the user. So I'm just going 
to hit Ctrl B and get rid of the package explorer.  

02:24:47.380 --> 02:24:58.210
And instead of sending a static file, this is 
going to remove this and now we're going to say  

02:24:58.210 --> 02:25:08.050
res dot render And then followed by the name of 
the file that you run to render index. Now, you  

02:25:08.050 --> 02:25:14.200
do not need the specified a dot e j s on the side. 
And that's because we already told express that we  

02:25:14.200 --> 02:25:23.200
are using ej s as the template. So now if I was 
to save this, just gonna hit Ctrl C, node app,  

02:25:23.200 --> 02:25:32.950
head over to Chrome, we're going to hit refresh. 
And you can see that we get the same exact output.  

02:25:32.950 --> 02:25:40.570
So what happened here? Well, when we render this 
index.js file, what's happening is the server is  

02:25:40.570 --> 02:25:46.900
going to look at this E js file for e. js code, 
it's going to execute it and then send back to the  

02:25:46.900 --> 02:25:54.610
client an HTML file. So now let's actually send 
data to sun back to our E js file. So from here,  

02:25:54.610 --> 02:26:02.140
I'm just going to give us a route parameter, 
I'm just going to say user query. And here we're  

02:26:02.141 --> 02:26:07.061
going to pass in an object. And this is going 
to be the data that we want to display within  

02:26:07.061 --> 02:26:14.380
our index.js template. So now I'm just going 
to give it a property. First, I'll say data,  

02:26:14.380 --> 02:26:26.320
then I'll give it a property of user query. And 
then we're going to pass in request dot params dot  

02:26:26.320 --> 02:26:36.970
user query. So now if I save this, I'm just going 
to hit Ctrl. C, just to exit out of our server.  

02:26:36.971 --> 02:26:46.900
Now we're going to go to our E js file. We're 
gonna go here to our template. And now from here,  

02:26:46.900 --> 02:26:56.500
we're going to specify less than or sent sign 
equal. What this means is I want you to output  

02:26:56.500 --> 02:27:03.610
onto the HTML file. Next, what we're going to do 
is access the data that we just passed in. So how  

02:27:03.610 --> 02:27:13.040
did we do that? Well, we gave it the property 
data, then we said, dot user query, afterwards,  

02:27:13.040 --> 02:27:21.410
we end it with percent sign, and then that. So now 
this is gonna look at our app dot j s, it's gonna  

02:27:21.410 --> 02:27:27.530
say, Okay, I want to render the Index page. And 
this is the data that I'm receiving. So we went to  

02:27:27.530 --> 02:27:36.470
data dot user query. So now if I was to save this 
index.js template, let's start back to server,  

02:27:36.471 --> 02:27:47.301
no to app. Let's go to Chrome. Hit refresh. And 
you'll see that we get cannot get forward slash.  

02:27:47.301 --> 02:27:53.330
And that's because we added a route parameter. 
So let's say the user searched for books,  

02:27:53.330 --> 02:28:02.030
for example. Then it says, Hey, you search for 
books. So imagine if this was a real website,  

02:28:02.030 --> 02:28:08.570
and we were on Amazon or eBay, you would do 
a search. So then on top of that web page,  

02:28:08.570 --> 02:28:16.671
you would get Hey, you searched for books, you 
searched for PCs, you search for whatever. So  

02:28:16.671 --> 02:28:23.360
that means I could use this ej s template for 
all the items within my website. So now, let's  

02:28:23.360 --> 02:28:30.590
actually add some dummy data. So if I go back to 
Visual Studio code, and what we're going to do  

02:28:30.591 --> 02:28:37.671
is instead of having hard coded stuff here, 
when the user types in, we searched for books,  

02:28:37.671 --> 02:28:44.690
we're gonna display a bunch of books. So I'm just 
going to go to App dot j s, we're going to pass  

02:28:44.690 --> 02:28:51.740
in more dummy data. So we have data user query, 
we're gonna pass in another thing. And I'm just  

02:28:51.740 --> 02:28:58.940
going to give it a Enter key to make it fit on 
one line. And we're going to pass in an array,  

02:28:58.940 --> 02:29:07.129
and this is going to be the search results. 
search results. Pass in an array, and we're  

02:29:07.130 --> 02:29:22.670
just going to say, book one, book, two, and Book 
Three. So now if I save this, go into my index,  

02:29:22.670 --> 02:29:31.460
e js file. Instead of saying dummy data, what we 
can do is, we could go to data, because that's the  

02:29:31.460 --> 02:29:40.160
object that we're passing in. We're gonna say 
search results. And then since it's an array,  

02:29:40.160 --> 02:29:46.430
we can access index zero. And this is going 
to give us our first position. And remember,  

02:29:46.430 --> 02:29:53.360
since we this is an E JS template, we're going 
to have to wrap this up within the following.  

02:29:53.360 --> 02:30:07.969
And now if I was to save this, let's go SQL Server 
restarted up, go to Chrome, hit refresh. And you  

02:30:07.970 --> 02:30:15.620
can see that now we're dynamically populating the 
web page. So now let's head back to Visual Studio  

02:30:15.620 --> 02:30:25.070
code. And what I want to do is, instead of just 
outputting data that search results that index  

02:30:25.070 --> 02:30:32.780
zero data that search results index one, what we 
can do is use a for each loop. So for example,  

02:30:32.780 --> 02:30:39.889
let's get rid of all this. And I started 
with that, we're going to pass in less than  

02:30:39.890 --> 02:30:50.420
percent sign, we're going to get our array. So 
what's our array at data, that search results, dot  

02:30:50.420 --> 02:31:02.540
for each, we get our result. And remember, we're 
going to end this with a percent sign less than,  

02:31:02.540 --> 02:31:09.440
and the reason why we don't have an equal sign 
here is because we are not outputting this onto  

02:31:09.440 --> 02:31:16.879
the HTML file. So for example, if I want to output 
this equal sign, if you don't want to output it,  

02:31:16.880 --> 02:31:25.050
no equal sign. Next, within here, what we're 
going to do is, we're going to display what  

02:31:25.050 --> 02:31:31.439
we want to output. So now what we're going 
to do is use less than percent sign equal,  

02:31:31.439 --> 02:31:38.490
because we actually want this to output to 
the HTML file. So I'm just gonna say, oh, II  

02:31:41.470 --> 02:31:53.080
result. And let's close our Li tag. So now we 
have to end this. So we're just going to end  

02:31:53.080 --> 02:32:00.370
it with percent sign, we're not going to use the 
equal sign because we do not want to output this  

02:32:00.370 --> 02:32:14.800
to the user. So now, if I was to save this, we can 
go down here Ctrl C, node app, go to Chrome, hit  

02:32:14.800 --> 02:32:23.560
refresh. And you can see that our search results 
gets dynamically added. So if we search for books,  

02:32:23.560 --> 02:32:30.580
and there was a million books, this code will work 
for a million books. If we searched for iPhones,  

02:32:30.580 --> 02:32:36.279
and there was only three types of iPhones, this 
code would work for three iPhones. So now let's  

02:32:36.279 --> 02:32:40.479
do an example involving conditionals. 
So we're just going to give a simple if  

02:32:40.479 --> 02:32:47.559
statement. If the user is logged in, we want you 
to display this, if the user is not logged in,  

02:32:47.560 --> 02:32:52.479
then we're not going to display anything extra. 
So now if I go back to Visual Studio code,  

02:32:52.479 --> 02:33:00.669
let's write an if statement underneath our 
h1 tag. So I'm just going to go here. I'm  

02:33:00.670 --> 02:33:13.510
gonna say this. If data logged in, and this is 
going to be a Boolean containing true or false,  

02:33:13.510 --> 02:33:24.460
but and this here, and now the meat of our if 
statement is going to be the HTML output that we  

02:33:24.460 --> 02:33:40.840
want to do. So now I'm just going to say h2. You 
are logged and as data dot username and sent sign,  

02:33:40.840 --> 02:33:50.170
and then let's close our h2 tag. Now we have 
to wrap up our if statement. So let's close  

02:33:50.170 --> 02:33:58.930
our if statement. And all we're going to do is 
do the following ecgs. close our if statement.  

02:33:58.930 --> 02:34:05.530
And remember, we're not using the equal sign 
because we're not wanting to output this. And  

02:34:05.530 --> 02:34:10.840
we're not using the equal sign up here because 
we don't want to output this if statement. So  

02:34:10.840 --> 02:34:19.810
now if I was to save our index.js file, let's go 
to App dot j s. And we're going to pass in those  

02:34:19.810 --> 02:34:29.860
properties that we added to our index.js file. 
So we passed in logged in. And for this example,  

02:34:29.860 --> 02:34:40.120
we're just going to set true and the username is 
going to be this. So I'm just going to go to index  

02:34:40.120 --> 02:34:48.880
that ETS just to see if we matched up properly. 
Otherwise, we're going to get an error. logged in  

02:34:48.880 --> 02:35:01.090
username here. Make sure everything matches up. 
Let's save this Ctrl C, node app. Head over to  

02:35:01.090 --> 02:35:08.830
Chrome, hit refresh. And you can see that since 
we are logged in, we're displaying our h2 tag,  

02:35:08.830 --> 02:35:15.430
you are logged in as so. And so if we set that 
to false, our h2 tag wouldn't appear. So that's  

02:35:15.430 --> 02:35:21.250
basically the ins and outs of how you can 
use ej s within your Express application.  

02:35:24.810 --> 02:35:30.330
In this tutorial, we're going to be talking about 
what middleware is, and how we can create our own  

02:35:30.330 --> 02:35:37.590
custom middleware. So middleware is basically the 
code that gets executed between the user request  

02:35:37.590 --> 02:35:42.960
and the server itself. Now, in the previous 
tutorials, we already used a middleware, and  

02:35:42.960 --> 02:35:49.980
that middleware was within the body parser module. 
So if we take a look at our Express application,  

02:35:49.980 --> 02:35:57.780
on line five, we say app dot use, and then as 
an argument, we pass an A function. And this  

02:35:57.780 --> 02:36:04.530
function is a middleware function, that when the 
user makes a request, this function will take the  

02:36:04.530 --> 02:36:11.910
user's request and process it. In this case, the 
body parser dot JSON function checks to see if  

02:36:11.910 --> 02:36:19.680
the user have sent any JSON data, processes that 
and then attaches it to the request dot body. And  

02:36:19.680 --> 02:36:26.280
then it calls a function called next, to let the 
server know that, hey, we're done processing this  

02:36:26.280 --> 02:36:31.410
request, you can send a nother request. So to 
get started, we're just going to go down here,  

02:36:31.410 --> 02:36:38.220
I'm going to say app use. And then we're 
going to pass in our own middleware function,  

02:36:38.220 --> 02:36:44.070
that's going to get executed whenever the user 
makes a request. So this should be very familiar,  

02:36:44.070 --> 02:36:49.860
we're going to pass in the first parameter is 
going to be the request object, their response.  

02:36:49.860 --> 02:36:59.610
And then the final parameter is going to be the 
next method. So now we already are familiar with  

02:36:59.610 --> 02:37:07.110
the request object and the response object. So 
what is this next method, this next method must be  

02:37:07.110 --> 02:37:13.019
invoked whenever you create a custom middleware. 
So what the next method is responsible for,  

02:37:13.020 --> 02:37:20.160
is to let Express know that, hey, I'm finished 
processing this request. If you do not call the  

02:37:20.160 --> 02:37:25.019
next method, what's going to end up happening 
is you're going to timeout the server, because  

02:37:25.020 --> 02:37:30.750
it has no idea whether or not you're finished 
processing that request or not. So right now,  

02:37:30.750 --> 02:37:35.850
I'm just going to say next, and we're just going 
to call it. And to make things a little bit more  

02:37:35.850 --> 02:37:45.931
interesting. let's actually go up here. And 
I am going to print out the request, that URL  

02:37:45.931 --> 02:37:57.480
and the request dot method. So now, if I was to 
save this, let's actually restart the server,  

02:37:57.480 --> 02:38:06.840
I'm just gonna hit Ctrl. C, node app, we're going 
to go to Chrome. I'm going to hit refresh. Now  

02:38:06.841 --> 02:38:12.721
when I hit refresh, what I did was make a get 
request to the server. So let's actually take a  

02:38:12.721 --> 02:38:19.501
look at Visual Studio code to see what happened. 
And you can see that our middleware is running.  

02:38:19.501 --> 02:38:26.761
So we made a request, it gives us the URL, it 
gives us the method of the request. So we made a  

02:38:26.761 --> 02:38:33.870
get request when we hit refresh. And then we said 
next, which let Express know that, hey, he's done  

02:38:33.870 --> 02:38:43.560
processing this. And then it got to this point 
where we just sent res dot send middleware onto  

02:38:43.561 --> 02:38:52.681
the user. So that's why you see that we got this. 
Now let's change this up. So instead of saying,  

02:38:52.681 --> 02:39:00.450
forward slash, because we got to get route there, 
let's just make something up. Now, if I hit Enter,  

02:39:00.450 --> 02:39:07.320
you can see Can I get whatever this route is, 
but that's okay, because we're not interested  

02:39:07.320 --> 02:39:13.830
in that. We're only interested in the middleware 
for this tutorial. And you can see once again,  

02:39:13.830 --> 02:39:19.801
that our middleware is running fine. So 
whenever there's a request made from the user,  

02:39:19.801 --> 02:39:27.450
this middleware function is going to get executed. 
And you can see that our route was printed out.  

02:39:27.450 --> 02:39:35.341
And the type of request was also printed out onto 
the console. Now, this is all fine and dandy. But  

02:39:35.341 --> 02:39:42.931
as we have it right now, whenever we use App dot 
use, and we have our middleware, any user request  

02:39:42.931 --> 02:39:48.631
is going to get processed by this middleware. 
Let's say that I only want this middleware to  

02:39:48.631 --> 02:39:57.520
execute when a certain route gets requested. So 
right here, I'm just gonna go here, and I'm just  

02:39:57.520 --> 02:40:08.020
gonna say example. This is gonna be our route. 
And now, whenever we call this example, route,  

02:40:08.020 --> 02:40:14.830
it could be any type of request, that could be 
a get request, post request, put, elite, doesn't  

02:40:14.830 --> 02:40:21.580
matter, this middleware is going to execute. But 
if it doesn't match this example route, then it's  

02:40:21.580 --> 02:40:30.160
not going to execute. So let's save this. And I'm 
just gonna hit Ctrl, C, node app, start this up  

02:40:30.160 --> 02:40:39.220
again. And now I'm just gonna hit refresh. Go back 
to Visual Studio code. And you can see that our  

02:40:39.220 --> 02:40:51.550
middleware is not executing. But if I go up here, 
type example. Go back to Visual Studio code. And  

02:40:51.550 --> 02:40:57.640
you can see that our middleware is executing just 
fine. And the last thing that you should note that  

02:40:57.640 --> 02:41:04.689
middleware functions can do is modify the request 
object and the response object. So going back to  

02:41:04.689 --> 02:41:11.889
our body parser example, it parses the user's 
request and searches for JSON, and then attaches  

02:41:11.890 --> 02:41:19.660
it to the request dot body. So to give a trivial 
example, I can say take the user's request,  

02:41:19.660 --> 02:41:29.979
and I can add a property called banana. And I 
could assign it the value of banana. And for the  

02:41:29.979 --> 02:41:35.889
sake of simplicity, since we already have this 
route here, we're just going to get rid of all  

02:41:35.890 --> 02:41:50.830
this. And within our get route, we're just gonna 
say, console dot log requests that been then. So  

02:41:50.830 --> 02:41:57.850
let's end that with a semicolon. Let's double 
check everything. And this looks good. So I'm  

02:41:57.850 --> 02:42:03.430
just going to save this. And we're going to 
restart the server. Now, the app, we're going to  

02:42:03.430 --> 02:42:12.520
go to Chrome. And we're going to hit our root. And 
there we go. If we go back to Visual Studio code,  

02:42:12.520 --> 02:42:19.870
you can see what's going on here, we made a 
request to the server, the server did some  

02:42:19.870 --> 02:42:27.099
processing the same thing that body parser did, 
and then adds to the request object. And in this  

02:42:27.100 --> 02:42:34.540
case, we just added banana, gave it a value of 
banana. And then here, when we got the request,  

02:42:34.540 --> 02:42:41.529
from our get route, you can see that we get the 
output of banana. So that's pretty much the ins  

02:42:41.529 --> 02:42:47.769
and outs of how you can create your own custom 
middleware, and how middleware works in general.  

02:42:51.590 --> 02:42:57.229
In this tutorial, we're going to be talking about 
the Express router. Now what the Express router  

02:42:57.229 --> 02:43:03.889
allows us to do is separate our routes into 
different files. This makes our code a lot more  

02:43:03.890 --> 02:43:11.090
manageable, as opposed to just sticking our routes 
within the app dot j. s file. So to get started,  

02:43:11.090 --> 02:43:16.670
I'm just going to hit Ctrl B to bring up our 
Explorer, I'm going to create a new folder to  

02:43:16.670 --> 02:43:23.989
store our routes. So I'm just going to right click 
here, new folder. Let's call that routes. And  

02:43:23.989 --> 02:43:30.529
we're going to create a new file called people. 
So this is where we're going to store our our  

02:43:30.529 --> 02:43:37.939
people routes. So I'm just going to hit Ctrl B 
again. And since we're using the Express router,  

02:43:37.939 --> 02:43:43.669
we're obviously going to need to include the 
Express module. So I'm just going to say const.  

02:43:43.670 --> 02:43:54.529
Express is equal to require Express. Next, we're 
going to call Express dot router, which is a  

02:43:54.529 --> 02:43:59.960
method that's going to return to us a instance of 
the router. So we're just going to say that within  

02:43:59.960 --> 02:44:09.619
a variable. So I'm just going to say Kant's route 
is equal to express dot router. So now that we  

02:44:09.619 --> 02:44:15.619
have our router instance, what we can do is setup 
our route. So we already know how to do that. So  

02:44:15.619 --> 02:44:21.590
I could say route back get. And we're just going 
to give it the path. And we're going to give it  

02:44:21.590 --> 02:44:31.310
the callback. So the request object response. And 
we're just going to say res dot send forward slash  

02:44:31.310 --> 02:44:42.890
being hit. Now let's just create a another row. 
So I'm just gonna copy this. For example, and I'm  

02:44:42.890 --> 02:44:52.069
gonna call this example. And let's say example, 
being hit. Now, we're not done yet. So right now  

02:44:52.069 --> 02:45:00.949
we have this route here. But how do we expose this 
route so that our app.js file can access Well,  

02:45:00.949 --> 02:45:06.349
in order to do that, we're going to have to use 
module dot exports. So I could go down here,  

02:45:06.350 --> 02:45:14.960
type module dot exports. And then we're just going 
to export this route that we created. So now I'm  

02:45:14.960 --> 02:45:22.550
going to save this, we're going to head back to 
our app.js file. And now down here, we're going  

02:45:22.550 --> 02:45:27.979
to have to actually require the people route. So 
how do we do that? Well, I'm going to create a  

02:45:27.979 --> 02:45:34.820
variable called people. And we're just going to 
require the file. So I'm just going to say dot  

02:45:34.820 --> 02:45:41.240
forward slash, I'm going to go inside the routes 
folder. And then I'm going to include our people  

02:45:41.240 --> 02:45:49.820
file. But we're not done yet. Remember, on line 
three, we created an express application. So now  

02:45:49.820 --> 02:45:55.849
we need to tell our Express application that 
we want to use this people were out. So let's  

02:45:55.850 --> 02:46:03.590
go down here. I'm going to say app dot use. And 
we're going to give it the base URL. So I'm just  

02:46:03.590 --> 02:46:10.820
going to say for slash people, and then we're 
going to pass in the people route as the second  

02:46:10.820 --> 02:46:17.059
argument. So it's going to pass on people. So 
now if I was to save this, head over down here,  

02:46:17.060 --> 02:46:30.950
node app, let's go to Chrome. And I type localhost 
Port 3000. And that's because we do not have a  

02:46:30.950 --> 02:46:42.439
base URL. Remember, we gave it people. So this is 
our base URL for this peoples row. So right now,  

02:46:42.439 --> 02:46:48.740
this forward slash would be accessed if I just 
typed people at the end of localhost. So I'm  

02:46:48.740 --> 02:46:58.219
just gonna add that people. And now you can see 
our four slashes being hit. And if I add another  

02:46:58.220 --> 02:47:07.220
forward slash, and do example, you can see our 
example route is being hit. So now what happens  

02:47:07.220 --> 02:47:11.930
if you want to add middleware to these routes, so 
I'm just going to go back to Visual Studio code,  

02:47:11.930 --> 02:47:23.240
we're going to go to our people route. And within 
here, I could say route.us, and then pass in our  

02:47:23.240 --> 02:47:29.929
function, our middleware function that we want 
to execute. So I could pass in my request object,  

02:47:29.930 --> 02:47:46.280
my rez, and next. And now I'm just gonna say, 
console dot log middleware being used. Now when  

02:47:46.280 --> 02:47:52.610
I use route that use, all requests is going 
to go through this middleware. So remember to  

02:47:52.610 --> 02:47:59.030
always call next, if you ever creating your own 
custom middleware. And now if I was to save this,  

02:47:59.030 --> 02:48:12.950
let's hit Ctrl C, node app. When I go to 
Chrome, hit refresh. And you can see that  

02:48:12.950 --> 02:48:18.710
our middleware is being used here. Now, this 
middleware is only going to be used within our  

02:48:18.710 --> 02:48:25.280
people out. If we had another route here. Let's 
say instead of people we had an animal route,  

02:48:25.280 --> 02:48:31.160
this middleware is obviously not going to 
get executed because this middleware is  

02:48:31.160 --> 02:48:36.559
only specified to work with our people route. 
So that's pretty much the ins and outs of how  

02:48:36.560 --> 02:48:41.900
you can use the Express router to actually 
separate your routes from the app.js file.
